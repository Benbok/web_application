#!/usr/bin/env python
"""
–ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –º—è–≥–∫–æ–≥–æ —É–¥–∞–ª–µ–Ω–∏—è –∏ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ —Å—Ç–∞—Ç—É—Å–æ–≤

–≠—Ç–æ—Ç —Å–∫—Ä–∏–ø—Ç –¥–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É–µ—Ç, –∫–∞–∫ —Ä–∞–±–æ—Ç–∞–µ—Ç —Å–∏—Å—Ç–µ–º–∞ –º—è–≥–∫–æ–≥–æ —É–¥–∞–ª–µ–Ω–∏—è
–∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –º–µ–∂–¥—É –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è–º–∏.
"""

import os
import sys
import django
from datetime import datetime, timedelta

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Django
os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'base.settings')
sys.path.append(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))
django.setup()

from django.contrib.auth import get_user_model
from django.contrib.contenttypes.models import ContentType
from django.utils import timezone

from treatment_management.models import TreatmentMedication, TreatmentPlan
from examination_management.models import ExaminationLabTest, ExaminationPlan
from clinical_scheduling.models import ScheduledAppointment
from patients.models import Patient
from encounters.models import Encounter

User = get_user_model()


def create_test_data():
    """–°–æ–∑–¥–∞–µ—Ç —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏"""
    print("üîß –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö...")
    
    # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å —É–Ω–∏–∫–∞–ª—å–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
    import uuid
    unique_suffix = str(uuid.uuid4())[:8]
    
    user, created = User.objects.get_or_create(
        username=f'test_doctor_{unique_suffix}',
        defaults={
            'first_name': '–¢–µ—Å—Ç',
            'last_name': '–í—Ä–∞—á',
            'email': f'test_{unique_suffix}@example.com'
        }
    )
    if created:
        print(f"‚úÖ –°–æ–∑–¥–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user}")
    else:
        print(f"‚Ñπ –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {user}")
    
    # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–∞—Ü–∏–µ–Ω—Ç–∞ —Å —É–Ω–∏–∫–∞–ª—å–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
    import uuid
    unique_suffix = str(uuid.uuid4())[:8]
    
    patient, created = Patient.objects.get_or_create(
        first_name=f'–¢–µ—Å—Ç_{unique_suffix}',
        last_name='–ü–∞—Ü–∏–µ–Ω—Ç',
        defaults={
            'middle_name': '–¢–µ—Å—Ç–æ–≤–∏—á',
            'birth_date': '1990-01-01'
        }
    )
    if created:
        print(f"‚úÖ –°–æ–∑–¥–∞–Ω –ø–∞—Ü–∏–µ–Ω—Ç: {patient}")
    else:
        print(f"‚Ñπ –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –ø–∞—Ü–∏–µ–Ω—Ç–∞: {patient}")
    
    # –°–æ–∑–¥–∞–µ–º —Å–ª—É—á–∞–π –æ–±—Ä–∞—â–µ–Ω–∏—è
    encounter, created = Encounter.objects.get_or_create(
        patient=patient,
        defaults={
            'date_start': timezone.now(),
            'doctor': user
        }
    )
    if created:
        print(f"‚úÖ –°–æ–∑–¥–∞–Ω —Å–ª—É—á–∞–π –æ–±—Ä–∞—â–µ–Ω–∏—è: {encounter}")
    else:
        print(f"‚Ñπ –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π —Å–ª—É—á–∞–π –æ–±—Ä–∞—â–µ–Ω–∏—è: {encounter}")
    
    # –°–æ–∑–¥–∞–µ–º –ø–ª–∞–Ω –ª–µ—á–µ–Ω–∏—è
    treatment_plan, created = TreatmentPlan.objects.get_or_create(
        encounter=encounter,
        name="–û—Å–Ω–æ–≤–Ω–æ–π",
        defaults={
            'description': '–û—Å–Ω–æ–≤–Ω–æ–π –ø–ª–∞–Ω –ª–µ—á–µ–Ω–∏—è –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏',
            'created_by': user
        }
    )
    if created:
        print(f"‚úÖ –°–æ–∑–¥–∞–Ω –ø–ª–∞–Ω –ª–µ—á–µ–Ω–∏—è: {treatment_plan}")
    
    # –°–æ–∑–¥–∞–µ–º –ø–ª–∞–Ω –æ–±—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è
    examination_plan, created = ExaminationPlan.objects.get_or_create(
        encounter=encounter,
        name="–û—Å–Ω–æ–≤–Ω–æ–π",
        defaults={
            'description': '–û—Å–Ω–æ–≤–Ω–æ–π –ø–ª–∞–Ω –æ–±—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏',
            'created_by': user
        }
    )
    if created:
        print(f"‚úÖ –°–æ–∑–¥–∞–Ω –ø–ª–∞–Ω –æ–±—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è: {examination_plan}")
    
    return user, patient, encounter, treatment_plan, examination_plan


def demonstrate_treatment_medication_soft_delete(user, treatment_plan):
    """–î–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É–µ—Ç –º—è–≥–∫–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è –ª–µ–∫–∞—Ä—Å—Ç–≤–∞"""
    print("\nüíä –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –º—è–≥–∫–æ–≥–æ —É–¥–∞–ª–µ–Ω–∏—è –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è –ª–µ–∫–∞—Ä—Å—Ç–≤–∞")
    print("=" * 60)
    
    # –°–æ–∑–¥–∞–µ–º –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–µ –ª–µ–∫–∞—Ä—Å—Ç–≤–∞
    medication = TreatmentMedication.objects.create(
        treatment_plan=treatment_plan,
        custom_medication="–ê—Å–ø–∏—Ä–∏–Ω",
        dosage="100 –º–≥",
        frequency="2 —Ä–∞–∑–∞ –≤ –¥–µ–Ω—å",
        instructions="–ü—Ä–∏–Ω–∏–º–∞—Ç—å –ø–æ—Å–ª–µ –µ–¥—ã"
    )
    print(f"‚úÖ –°–æ–∑–¥–∞–Ω–æ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–µ: {medication}")
    print(f"   –°—Ç–∞—Ç—É—Å: {medication.get_status_display()}")
    
    # –°–æ–∑–¥–∞–µ–º –∏–ª–∏ –ø–æ–ª—É—á–∞–µ–º –æ—Ç–¥–µ–ª–µ–Ω–∏–µ
    from departments.models import Department
    department, created = Department.objects.get_or_create(
        name='–¢–µ—Ä–∞–ø–µ–≤—Ç–∏—á–µ—Å–∫–æ–µ –æ—Ç–¥–µ–ª–µ–Ω–∏–µ',
        defaults={'description': '–û—Ç–¥–µ–ª–µ–Ω–∏–µ –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏'}
    )
    if created:
        print(f"‚úÖ –°–æ–∑–¥–∞–Ω–æ –æ—Ç–¥–µ–ª–µ–Ω–∏–µ: {department}")
    
    # –°–æ–∑–¥–∞–µ–º –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —Å–æ–±—ã—Ç–∏–µ
    content_type = ContentType.objects.get_for_model(TreatmentMedication)
    appointment = ScheduledAppointment.objects.create(
        content_type=content_type,
        object_id=medication.pk,
        patient=medication.treatment_plan.encounter.patient,
        created_department=department,
        encounter=medication.treatment_plan.encounter,
        scheduled_date=timezone.now().date() + timedelta(days=1),
        scheduled_time=timezone.now().time(),
        execution_status='scheduled'
    )
    print(f"‚úÖ –°–æ–∑–¥–∞–Ω–æ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —Å–æ–±—ã—Ç–∏–µ: {appointment}")
    print(f"   –°—Ç–∞—Ç—É—Å –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: {appointment.get_execution_status_display()}")
    
    # –î–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É–µ–º –ø—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–∫—É
    print(f"\n‚è∏Ô∏è  –ü—Ä–∏–æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–µ...")
    medication.pause(
        reason="–í—Ä–µ–º–µ–Ω–Ω–∞—è –∞–ª–ª–µ—Ä–≥–∏—á–µ—Å–∫–∞—è —Ä–µ–∞–∫—Ü–∏—è",
        paused_by=user
    )
    print(f"‚úÖ –ù–∞–∑–Ω–∞—á–µ–Ω–∏–µ –ø—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ")
    print(f"   –°—Ç–∞—Ç—É—Å: {medication.get_status_display()}")
    print(f"   –ü—Ä–∏—á–∏–Ω–∞: {medication.pause_reason}")
    print(f"   –ü—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–∏–ª: {medication.paused_by}")
    print(f"   –î–∞—Ç–∞ –ø—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–∫–∏: {medication.paused_at}")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—é —Å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ–º
    appointment.refresh_from_db()
    print(f"   –°—Ç–∞—Ç—É—Å —Å–æ–±—ã—Ç–∏—è: {appointment.get_execution_status_display()}")
    
    # –î–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É–µ–º –≤–æ–∑–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ
    print(f"\n‚ñ∂Ô∏è  –í–æ–∑–æ–±–Ω–æ–≤–ª—è–µ–º –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–µ...")
    medication.resume()
    print(f"‚úÖ –ù–∞–∑–Ω–∞—á–µ–Ω–∏–µ –≤–æ–∑–æ–±–Ω–æ–≤–ª–µ–Ω–æ")
    print(f"   –°—Ç–∞—Ç—É—Å: {medication.get_status_display()}")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—é —Å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ–º
    appointment.refresh_from_db()
    print(f"   –°—Ç–∞—Ç—É—Å —Å–æ–±—ã—Ç–∏—è: {appointment.get_execution_status_display()}")
    
    # –î–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É–µ–º –æ—Ç–º–µ–Ω—É (–º—è–≥–∫–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ)
    print(f"\n‚ùå –û—Ç–º–µ–Ω—è–µ–º –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–µ (–º—è–≥–∫–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ)...")
    medication.cancel(
        reason="–ü–∞—Ü–∏–µ–Ω—Ç –æ—Ç–∫–∞–∑–∞–ª—Å—è –æ—Ç –ª–µ—á–µ–Ω–∏—è",
        cancelled_by=user
    )
    print(f"‚úÖ –ù–∞–∑–Ω–∞—á–µ–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ")
    print(f"   –°—Ç–∞—Ç—É—Å: {medication.get_status_display()}")
    print(f"   –ü—Ä–∏—á–∏–Ω–∞: {medication.cancellation_reason}")
    print(f"   –û—Ç–º–µ–Ω–∏–ª: {medication.cancelled_by}")
    print(f"   –î–∞—Ç–∞ –æ—Ç–º–µ–Ω—ã: {medication.cancelled_at}")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—é —Å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ–º
    appointment.refresh_from_db()
    print(f"   –°—Ç–∞—Ç—É—Å —Å–æ–±—ã—Ç–∏—è: {appointment.get_execution_status_display()}")
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é –∏–∑–º–µ–Ω–µ–Ω–∏–π
    print(f"\nüìã –ò—Å—Ç–æ—Ä–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏–π —Å—Ç–∞—Ç—É—Å–∞:")
    history = medication.get_status_history()
    for change in history:
        if change['status'] == 'cancelled':
            print(f"   ‚ùå {change['status']}: {change['date']} - {change['reason']}")
        elif change['status'] == 'paused':
            print(f"   ‚è∏Ô∏è  {change['status']}: {change['date']} - {change['reason']}")
    
    return medication


def demonstrate_examination_lab_test_soft_delete(user, examination_plan):
    """–î–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É–µ—Ç –º—è–≥–∫–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ –ª–∞–±–æ—Ä–∞—Ç–æ—Ä–Ω–æ–≥–æ –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è"""
    print("\nüß™ –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –º—è–≥–∫–æ–≥–æ —É–¥–∞–ª–µ–Ω–∏—è –ª–∞–±–æ—Ä–∞—Ç–æ—Ä–Ω–æ–≥–æ –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è")
    print("=" * 60)
    
    # –°–æ–∑–¥–∞–µ–º –ª–∞–±–æ—Ä–∞—Ç–æ—Ä–Ω–æ–µ –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ
    from lab_tests.models import LabTestDefinition
    
    lab_test_def, created = LabTestDefinition.objects.get_or_create(
        name="–û–±—â–∏–π –∞–Ω–∞–ª–∏–∑ –∫—Ä–æ–≤–∏",
        defaults={'description': '–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –∫—Ä–æ–≤–∏'}
    )
    
    lab_test = ExaminationLabTest.objects.create(
        examination_plan=examination_plan,
        lab_test=lab_test_def,
        instructions="–°–¥–∞–≤–∞—Ç—å –Ω–∞—Ç–æ—â–∞–∫"
    )
    print(f"‚úÖ –°–æ–∑–¥–∞–Ω–æ –ª–∞–±–æ—Ä–∞—Ç–æ—Ä–Ω–æ–µ –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ: {lab_test}")
    print(f"   –°—Ç–∞—Ç—É—Å: {lab_test.get_status_display()}")
    
    # –°–æ–∑–¥–∞–µ–º –∏–ª–∏ –ø–æ–ª—É—á–∞–µ–º –æ—Ç–¥–µ–ª–µ–Ω–∏–µ
    from departments.models import Department
    department, created = Department.objects.get_or_create(
        name='–¢–µ—Ä–∞–ø–µ–≤—Ç–∏—á–µ—Å–∫–æ–µ –æ—Ç–¥–µ–ª–µ–Ω–∏–µ',
        defaults={'description': '–û—Ç–¥–µ–ª–µ–Ω–∏–µ –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏'}
    )
    if created:
        print(f"‚úÖ –°–æ–∑–¥–∞–Ω–æ –æ—Ç–¥–µ–ª–µ–Ω–∏–µ: {department}")
    
    # –°–æ–∑–¥–∞–µ–º –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —Å–æ–±—ã—Ç–∏–µ
    content_type = ContentType.objects.get_for_model(ExaminationLabTest)
    appointment = ScheduledAppointment.objects.create(
        content_type=content_type,
        object_id=lab_test.pk,
        patient=lab_test.examination_plan.encounter.patient,
        created_department=department,
        encounter=lab_test.examination_plan.encounter,
        scheduled_date=timezone.now().date() + timedelta(days=2),
        scheduled_time=timezone.now().time(),
        execution_status='scheduled'
    )
    print(f"‚úÖ –°–æ–∑–¥–∞–Ω–æ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —Å–æ–±—ã—Ç–∏–µ: {appointment}")
    print(f"   –°—Ç–∞—Ç—É—Å –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: {appointment.get_execution_status_display()}")
    
    # –î–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É–µ–º –æ—Ç–º–µ–Ω—É
    print(f"\n‚ùå –û—Ç–º–µ–Ω—è–µ–º –ª–∞–±–æ—Ä–∞—Ç–æ—Ä–Ω–æ–µ –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ...")
    lab_test.cancel(
        reason="–ü–∞—Ü–∏–µ–Ω—Ç –Ω–µ —è–≤–∏–ª—Å—è –Ω–∞ –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ",
        cancelled_by=user
    )
    print(f"‚úÖ –ò—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ")
    print(f"   –°—Ç–∞—Ç—É—Å: {lab_test.get_status_display()}")
    print(f"   –ü—Ä–∏—á–∏–Ω–∞: {lab_test.cancellation_reason}")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—é —Å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ–º
    appointment.refresh_from_db()
    print(f"   –°—Ç–∞—Ç—É—Å —Å–æ–±—ã—Ç–∏—è: {appointment.get_execution_status_display()}")
    
    return lab_test


def demonstrate_status_queries():
    """–î–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É–µ—Ç –∑–∞–ø—Ä–æ—Å—ã –ø–æ —Å—Ç–∞—Ç—É—Å–∞–º"""
    print("\nüîç –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–ø—Ä–æ—Å–æ–≤ –ø–æ —Å—Ç–∞—Ç—É—Å–∞–º")
    print("=" * 60)
    
    # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è –ø–æ —Å—Ç–∞—Ç—É—Å–∞–º
    active_medications = TreatmentMedication.objects.filter(status='active').count()
    cancelled_medications = TreatmentMedication.objects.filter(status='cancelled').count()
    paused_medications = TreatmentMedication.objects.filter(status='paused').count()
    completed_medications = TreatmentMedication.objects.filter(status='completed').count()
    
    print(f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–π –ª–µ–∫–∞—Ä—Å—Ç–≤:")
    print(f"   –ê–∫—Ç–∏–≤–Ω—ã–µ: {active_medications}")
    print(f"   –û—Ç–º–µ–Ω–µ–Ω–Ω—ã–µ: {cancelled_medications}")
    print(f"   –ü—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ: {paused_medications}")
    print(f"   –ó–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–µ: {completed_medications}")
    
    # –ù–∞—Ö–æ–¥–∏–º –Ω–µ–¥–∞–≤–Ω–æ –æ—Ç–º–µ–Ω–µ–Ω–Ω—ã–µ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è
    recent_cancelled = TreatmentMedication.objects.filter(
        status='cancelled',
        cancelled_at__gte=timezone.now() - timedelta(days=7)
    ).select_related('cancelled_by', 'treatment_plan__encounter__patient')
    
    print(f"\nüìÖ –ù–µ–¥–∞–≤–Ω–æ –æ—Ç–º–µ–Ω–µ–Ω–Ω—ã–µ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è (–∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 7 –¥–Ω–µ–π):")
    for med in recent_cancelled:
        patient_name = med.treatment_plan.encounter.patient.full_name
        cancelled_by = med.cancelled_by.get_full_name() if med.cancelled_by else "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
        print(f"   üíä {med.get_medication_name()} - {patient_name}")
        print(f"      –û—Ç–º–µ–Ω–∏–ª: {cancelled_by}")
        print(f"      –ü—Ä–∏—á–∏–Ω–∞: {med.cancellation_reason}")
        print(f"      –î–∞—Ç–∞: {med.cancelled_at.strftime('%d.%m.%Y %H:%M')}")


def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏"""
    print("üöÄ –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è —Å–∏—Å—Ç–µ–º—ã –º—è–≥–∫–æ–≥–æ —É–¥–∞–ª–µ–Ω–∏—è –∏ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ —Å—Ç–∞—Ç—É—Å–æ–≤")
    print("=" * 80)
    
    try:
        # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
        user, patient, encounter, treatment_plan, examination_plan = create_test_data()
        
        # –î–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É–µ–º –º—è–≥–∫–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è –ª–µ–∫–∞—Ä—Å—Ç–≤–∞
        medication = demonstrate_treatment_medication_soft_delete(user, treatment_plan)
        
        # –î–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É–µ–º –º—è–≥–∫–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ –ª–∞–±–æ—Ä–∞—Ç–æ—Ä–Ω–æ–≥–æ –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è
        lab_test = demonstrate_examination_lab_test_soft_delete(user, examination_plan)
        
        # –î–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É–µ–º –∑–∞–ø—Ä–æ—Å—ã –ø–æ —Å—Ç–∞—Ç—É—Å–∞–º
        demonstrate_status_queries()
        
        print("\nüéâ –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!")
        print("\nüìù –ß—Ç–æ –±—ã–ª–æ –ø—Ä–æ–¥–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–æ:")
        print("   ‚úÖ –°–æ–∑–¥–∞–Ω–∏–µ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–π –∏ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Å–æ–±—ã—Ç–∏–π")
        print("   ‚úÖ –ü—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–∫–∞ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–π —Å —É–∫–∞–∑–∞–Ω–∏–µ–º –ø—Ä–∏—á–∏–Ω—ã")
        print("   ‚úÖ –í–æ–∑–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã—Ö –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–π")
        print("   ‚úÖ –û—Ç–º–µ–Ω–∞ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–π (–º—è–≥–∫–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ)")
        print("   ‚úÖ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —Å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ–º")
        print("   ‚úÖ –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø–æ–ª–Ω–æ–π –∏—Å—Ç–æ—Ä–∏–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–π")
        print("   ‚úÖ –ó–∞–ø—Ä–æ—Å—ã –ø–æ —Å—Ç–∞—Ç—É—Å–∞–º –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–π")
        
        print(f"\nüí° –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –≤ –∞–¥–º–∏–Ω–∫–µ Django:")
        print(f"   - –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–µ: {medication}")
        print(f"   - –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –ª–∞–±–æ—Ä–∞—Ç–æ—Ä–Ω–æ–µ –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ: {lab_test}")
        print(f"   - –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—é –≤ clinical_scheduling")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏: {e}")
        import traceback
        traceback.print_exc()


if __name__ == "__main__":
    main() 