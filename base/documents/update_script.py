#!/usr/bin/env python
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –º–æ–¥—É–ª—è Documents
"""
import os
import sys
import django
import subprocess
import json
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –ø—Ä–æ–µ–∫—Ç—É
BASE_DIR = Path(__file__).resolve().parent.parent
sys.path.append(str(BASE_DIR))

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Django
os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'base.settings')
django.setup()

from django.core.management import execute_from_command_line
from django.db import connection
from django.core.cache import cache


def run_command(command, description):
    """–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã —Å –≤—ã–≤–æ–¥–æ–º"""
    print(f"\nüîÑ {description}...")
    try:
        result = subprocess.run(command, shell=True, capture_output=True, text=True)
        if result.returncode == 0:
            print(f"‚úÖ {description} –≤—ã–ø–æ–ª–Ω–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ")
            if result.stdout:
                print(result.stdout)
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ {description.lower()}:")
            print(result.stderr)
            return False
    except Exception as e:
        print(f"‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ {description.lower()}: {e}")
        return False
    return True


def backup_database():
    """–°–æ–∑–¥–∞–Ω–∏–µ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
    backup_file = f"backup_documents_{django.utils.timezone.now().strftime('%Y%m%d_%H%M%S')}.json"
    command = f"python manage.py dumpdata documents > {backup_file}"
    
    if run_command(command, "–°–æ–∑–¥–∞–Ω–∏–µ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"):
        print(f"üìÅ –†–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –≤: {backup_file}")
        return backup_file
    return None


def install_dependencies():
    """–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π"""
    dependencies = [
        "django-redis",
        "reportlab",  # –¥–ª—è PDF —ç–∫—Å–ø–æ—Ä—Ç–∞
        "python-docx",  # –¥–ª—è DOCX —ç–∫—Å–ø–æ—Ä—Ç–∞
    ]
    
    for dep in dependencies:
        command = f"pip install {dep}"
        if not run_command(command, f"–£—Å—Ç–∞–Ω–æ–≤–∫–∞ {dep}"):
            return False
    return True


def run_migrations():
    """–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –º–∏–≥—Ä–∞—Ü–∏–π"""
    commands = [
        ("python manage.py makemigrations documents", "–°–æ–∑–¥–∞–Ω–∏–µ –º–∏–≥—Ä–∞—Ü–∏–π"),
        ("python manage.py migrate documents", "–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –º–∏–≥—Ä–∞—Ü–∏–π"),
    ]
    
    for command, description in commands:
        if not run_command(command, description):
            return False
    return True


def update_existing_data():
    """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –¥–∞–Ω–Ω—ã—Ö"""
    print("\nüîÑ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –¥–∞–Ω–Ω—ã—Ö...")
    
    try:
        from documents.models import ClinicalDocument, DocumentType, DocumentTemplate
        from documents.optimizations import DocumentSearch
        
        # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–æ–≤ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤
        updated_docs = ClinicalDocument.objects.filter(is_archived__isnull=True).update(is_archived=False)
        print(f"‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–æ {updated_docs} –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ (is_archived)")
        
        updated_types = DocumentType.objects.filter(is_active__isnull=True).update(is_active=True)
        print(f"‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–æ {updated_types} —Ç–∏–ø–æ–≤ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ (is_active)")
        
        updated_templates = DocumentTemplate.objects.filter(is_active__isnull=True).update(is_active=True)
        print(f"‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–æ {updated_templates} —à–∞–±–ª–æ–Ω–æ–≤ (is_active)")
        
        # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ–∏—Å–∫–æ–≤—ã—Ö –≤–µ–∫—Ç–æ—Ä–æ–≤ (—Ç–æ–ª—å–∫–æ –¥–ª—è PostgreSQL)
        if 'postgresql' in connection.vendor:
            print("üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ–∏—Å–∫–æ–≤—ã—Ö –≤–µ–∫—Ç–æ—Ä–æ–≤ –¥–ª—è PostgreSQL...")
            count = 0
            for document in ClinicalDocument.objects.all():
                document.data_search = DocumentSearch.create_search_vector(document)
                document.save(update_fields=['data_search'])
                count += 1
            print(f"‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–æ {count} –ø–æ–∏—Å–∫–æ–≤—ã—Ö –≤–µ–∫—Ç–æ—Ä–æ–≤")
        
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö: {e}")
        return False


def test_cache():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫—ç—à–∞"""
    print("\nüîÑ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫—ç—à–∞...")
    
    try:
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –∫—ç—à
        test_key = "test_cache_key"
        test_value = "test_value"
        
        cache.set(test_key, test_value, 60)
        retrieved_value = cache.get(test_key)
        
        if retrieved_value == test_value:
            print("‚úÖ –ö—ç—à —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
            cache.delete(test_key)
            return True
        else:
            print("‚ùå –ö—ç—à –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
            return False
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –∫—ç—à–∞: {e}")
        return False


def create_indexes():
    """–°–æ–∑–¥–∞–Ω–∏–µ –∏–Ω–¥–µ–∫—Å–æ–≤ –¥–ª—è PostgreSQL"""
    print("\nüîÑ –°–æ–∑–¥–∞–Ω–∏–µ –∏–Ω–¥–µ–∫—Å–æ–≤ –¥–ª—è PostgreSQL...")
    
    if 'postgresql' not in connection.vendor:
        print("‚ÑπÔ∏è –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ PostgreSQL, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ –∏–Ω–¥–µ–∫—Å–æ–≤")
        return True
    
    indexes = [
        """
        CREATE INDEX CONCURRENTLY IF NOT EXISTS document_data_gin_idx 
        ON documents_clinicaldocument USING GIN (data);
        """,
        """
        CREATE INDEX CONCURRENTLY IF NOT EXISTS document_search_gin_idx 
        ON documents_clinicaldocument USING GIN (data_search);
        """,
        """
        CREATE INDEX CONCURRENTLY IF NOT EXISTS document_type_date_idx 
        ON documents_clinicaldocument (document_type_id, datetime_document);
        """,
        """
        CREATE INDEX CONCURRENTLY IF NOT EXISTS document_author_idx 
        ON documents_clinicaldocument (author_id);
        """,
        """
        CREATE INDEX CONCURRENTLY IF NOT EXISTS document_status_idx 
        ON documents_clinicaldocument (is_signed, is_canceled, is_archived);
        """
    ]
    
    try:
        with connection.cursor() as cursor:
            for i, index_sql in enumerate(indexes, 1):
                print(f"üîÑ –°–æ–∑–¥–∞–Ω–∏–µ –∏–Ω–¥–µ–∫—Å–∞ {i}/{len(indexes)}...")
                cursor.execute(index_sql)
                print(f"‚úÖ –ò–Ω–¥–µ–∫—Å {i} —Å–æ–∑–¥–∞–Ω")
        
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∏–Ω–¥–µ–∫—Å–æ–≤: {e}")
        return False


def check_redis():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Redis"""
    print("\nüîÑ –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Redis...")
    
    try:
        import redis
        r = redis.Redis(host='localhost', port=6379, db=1)
        r.ping()
        print("‚úÖ Redis –¥–æ—Å—Ç—É–ø–µ–Ω")
        return True
    except Exception as e:
        print(f"‚ùå Redis –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: {e}")
        print("üí° –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –∏ –∑–∞–ø—É—Å—Ç–∏—Ç–µ Redis:")
        print("   Ubuntu/Debian: sudo apt-get install redis-server")
        print("   macOS: brew install redis")
        print("   Windows: —Å–∫–∞—á–∞–π—Ç–µ —Å https://redis.io/download")
        return False


def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è"""
    print("üöÄ –ù–∞—á–∞–ª–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –º–æ–¥—É–ª—è Documents")
    print("=" * 50)
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–µ–∫—É—â–µ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
    if not os.path.exists('manage.py'):
        print("‚ùå –°–∫—Ä–∏–ø—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –∑–∞–ø—É—â–µ–Ω –∏–∑ –∫–æ—Ä–Ω–µ–≤–æ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –ø—Ä–æ–µ–∫—Ç–∞")
        return False
    
    # –°–æ–∑–¥–∞–Ω–∏–µ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏
    backup_file = backup_database()
    if not backup_file:
        print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é")
        return False
    
    # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
    if not install_dependencies():
        print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏")
        return False
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ Redis
    if not check_redis():
        print("‚ö†Ô∏è Redis –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ –±—É–¥–µ—Ç –æ—Ç–∫–ª—é—á–µ–Ω–æ")
    
    # –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –º–∏–≥—Ä–∞—Ü–∏–π
    if not run_migrations():
        print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã–ø–æ–ª–Ω–∏—Ç—å –º–∏–≥—Ä–∞—Ü–∏–∏")
        return False
    
    # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
    if not update_existing_data():
        print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ")
        return False
    
    # –°–æ–∑–¥–∞–Ω–∏–µ –∏–Ω–¥–µ–∫—Å–æ–≤
    if not create_indexes():
        print("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –∏–Ω–¥–µ–∫—Å—ã")
    
    # –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫—ç—à–∞
    if not test_cache():
        print("‚ö†Ô∏è –ö—ç—à –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç")
    
    print("\n" + "=" * 50)
    print("‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –º–æ–¥—É–ª—è Documents –∑–∞–≤–µ—Ä—à–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ!")
    print(f"üìÅ –†–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è: {backup_file}")
    print("\nüìã –°–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏:")
    print("1. –û–±–Ω–æ–≤–∏—Ç–µ –∏–º–ø–æ—Ä—Ç—ã –≤ views.py")
    print("2. –û–±–Ω–æ–≤–∏—Ç–µ URL-—ã –≤ –≥–ª–∞–≤–Ω–æ–º urls.py")
    print("3. –ù–∞—Å—Ç—Ä–æ–π—Ç–µ –∫—ç—à –≤ settings.py")
    print("4. –ü—Ä–æ—Ç–µ—Å—Ç–∏—Ä—É–π—Ç–µ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å")
    
    return True


if __name__ == "__main__":
    success = main()
    sys.exit(0 if success else 1) 