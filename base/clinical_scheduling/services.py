from django.utils import timezone
from datetime import timedelta, time
from django.contrib.contenttypes.models import ContentType
from .models import ScheduledAppointment
from departments.models import PatientDepartmentStatus, Department

class ClinicalSchedulingService:
    @staticmethod
    def create_schedule_for_assignment(assignment, user, start_date=None, first_time=None, times_per_day=None, duration_days=None):
        """
        –°–æ–∑–¥–∞–µ—Ç —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è
        
        Args:
            assignment: –ù–∞–∑–Ω–∞—á–µ–Ω–∏–µ (TreatmentMedication, ExaminationLabTest, etc.)
            user: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å, —Å–æ–∑–¥–∞—é—â–∏–π —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ
            start_date: –î–∞—Ç–∞ –Ω–∞—á–∞–ª–∞ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é - —Å–µ–≥–æ–¥–Ω—è)
            first_time: –í—Ä–µ–º—è –ø–µ—Ä–≤–æ–≥–æ –ø—Ä–∏–µ–º–∞ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é - 09:00)
            times_per_day: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–∏–µ–º–æ–≤ –≤ –¥–µ–Ω—å (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é - 1)
            duration_days: –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∫—É—Ä—Å–∞ –≤ –¥–Ω—è—Ö (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é - 7)
        """
        print(f"üîß ClinicalSchedulingService.create_schedule_for_assignment –≤—ã–∑–≤–∞–Ω –¥–ª—è {assignment}")
        print(f"üìù –¢–∏–ø –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è: {type(assignment).__name__}")
        
        if not start_date:
            start_date = timezone.now().date()
        if not first_time:
            first_time = time(9, 0)
        if not times_per_day:
            times_per_day = 1
        if not duration_days:
            duration_days = 7
        
        print(f"üìÖ –ü–∞—Ä–∞–º–µ—Ç—Ä—ã: start_date={start_date}, first_time={first_time}, times_per_day={times_per_day}, duration_days={duration_days}")
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–∞—Ü–∏–µ–Ω—Ç–µ, –æ—Ç–¥–µ–ª–µ–Ω–∏–∏ –∏ —Å–ª—É—á–∞–µ –ø–æ—Å—Ç—É–ø–ª–µ–Ω–∏—è
        patient = ClinicalSchedulingService._get_patient_from_assignment(assignment)
        department = ClinicalSchedulingService._get_department_from_assignment(assignment)
        encounter = ClinicalSchedulingService._get_encounter_from_assignment(assignment)
        
        print(f"üë§ –ü–∞—Ü–∏–µ–Ω—Ç: {patient}")
        print(f"üè• –û—Ç–¥–µ–ª–µ–Ω–∏–µ: {department}")
        print(f"üìã –°–ª—É—á–∞–π –ø–æ—Å—Ç—É–ø–ª–µ–Ω–∏—è: {encounter}")
        
        if not patient:
            print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –ø–∞—Ü–∏–µ–Ω—Ç–∞ –¥–ª—è –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è")
            raise ValueError("–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –ø–∞—Ü–∏–µ–Ω—Ç–∞ –¥–ª—è –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è")
        
        if not department:
            print("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –æ—Ç–¥–µ–ª–µ–Ω–∏–µ –¥–ª—è –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è, –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–∏–µ–º–Ω–æ–µ –æ—Ç–¥–µ–ª–µ–Ω–∏–µ")
            # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –æ—Ç–¥–µ–ª–µ–Ω–∏–µ, –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–∏–µ–º–Ω–æ–µ –æ—Ç–¥–µ–ª–µ–Ω–∏–µ
            try:
                department = Department.objects.filter(slug='admission').first()
                if not department:
                    # –ï—Å–ª–∏ –Ω–µ—Ç –ø—Ä–∏–µ–º–Ω–æ–≥–æ –æ—Ç–¥–µ–ª–µ–Ω–∏—è, –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø–µ—Ä–≤–æ–µ –¥–æ—Å—Ç—É–ø–Ω–æ–µ
                    department = Department.objects.first()
                if department:
                    print(f"‚úÖ –ò—Å–ø–æ–ª—å–∑—É—é –æ—Ç–¥–µ–ª–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: {department}")
                else:
                    print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –Ω–∏ –æ–¥–Ω–æ–≥–æ –æ—Ç–¥–µ–ª–µ–Ω–∏—è")
                    raise ValueError("–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –æ—Ç–¥–µ–ª–µ–Ω–∏–µ –¥–ª—è –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è")
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –æ—Ç–¥–µ–ª–µ–Ω–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: {e}")
                raise ValueError("–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –æ—Ç–¥–µ–ª–µ–Ω–∏–µ –¥–ª—è –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è")
        
        print(f"üîç –ü—Ä–æ–≤–µ—Ä—è—é –∞—Ç—Ä–∏–±—É—Ç—ã –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è: {[attr for attr in dir(assignment) if not attr.startswith('_')]}")
        
        if hasattr(assignment, 'medication'):
            print("üíä –°–æ–∑–¥–∞—é —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è –ª–µ–∫–∞—Ä—Å—Ç–≤–∞")
            return ClinicalSchedulingService._create_medication_schedule(
                assignment, patient, department, encounter, start_date, first_time, times_per_day, duration_days
            )
        elif hasattr(assignment, 'lab_test'):
            print("üß™ –°–æ–∑–¥–∞—é —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è –ª–∞–±–æ—Ä–∞—Ç–æ—Ä–Ω–æ–≥–æ —Ç–µ—Å—Ç–∞")
            return ClinicalSchedulingService._create_lab_test_schedule(
                assignment, patient, department, encounter, start_date, first_time
            )
        elif hasattr(assignment, 'instrumental_procedure'):
            print("üî¨ –°–æ–∑–¥–∞—é —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞–ª—å–Ω–æ–≥–æ –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è")
            return ClinicalSchedulingService._create_procedure_schedule(
                assignment, patient, department, encounter, start_date, first_time
            )
        else:
            print("‚ö†Ô∏è –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è")
        return []
    
    @staticmethod
    def _get_patient_from_assignment(assignment):
        """–ü–æ–ª—É—á–∞–µ—Ç –ø–∞—Ü–∏–µ–Ω—Ç–∞ –∏–∑ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è"""
        print(f"üîç _get_patient_from_assignment: {assignment}")
        print(f"üìù –¢–∏–ø: {type(assignment).__name__}")
        
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä—è–º—ã–µ –∞—Ç—Ä–∏–±—É—Ç—ã
            if hasattr(assignment, 'patient'):
                print(f"‚úÖ –ù–∞–π–¥–µ–Ω –ø—Ä—è–º–æ–π –∞—Ç—Ä–∏–±—É—Ç patient: {assignment.patient}")
                return assignment.patient
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á–µ—Ä–µ–∑ treatment_plan
            if hasattr(assignment, 'treatment_plan'):
                print(f"üîó –ù–∞–π–¥–µ–Ω treatment_plan: {assignment.treatment_plan}")
                
                # –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º patient_department_status
                if hasattr(assignment.treatment_plan, 'patient_department_status') and assignment.treatment_plan.patient_department_status:
                    try:
                        patient = assignment.treatment_plan.patient_department_status.patient
                        print(f"‚úÖ –ü–∞—Ü–∏–µ–Ω—Ç —á–µ—Ä–µ–∑ patient_department_status: {patient}")
                        return patient
                    except Exception as e:
                        print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø–∞—Ü–∏–µ–Ω—Ç–∞ —á–µ—Ä–µ–∑ patient_department_status: {e}")
                
                # –ó–∞—Ç–µ–º –ø—Ä–æ–≤–µ—Ä—è–µ–º encounter
                if hasattr(assignment.treatment_plan, 'encounter') and assignment.treatment_plan.encounter:
                    try:
                        patient = assignment.treatment_plan.encounter.patient
                        print(f"‚úÖ –ü–∞—Ü–∏–µ–Ω—Ç —á–µ—Ä–µ–∑ encounter: {patient}")
                        return patient
                    except Exception as e:
                        print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø–∞—Ü–∏–µ–Ω—Ç–∞ —á–µ—Ä–µ–∑ encounter: {e}")
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º owner (GenericForeignKey)
                if hasattr(assignment.treatment_plan, 'owner') and assignment.treatment_plan.owner:
                    try:
                        if hasattr(assignment.treatment_plan.owner, 'patient'):
                            patient = assignment.treatment_plan.owner.patient
                            print(f"‚úÖ –ü–∞—Ü–∏–µ–Ω—Ç —á–µ—Ä–µ–∑ owner.patient: {patient}")
                            return patient
                        elif hasattr(assignment.treatment_plan.owner, 'get_patient'):
                            patient = assignment.treatment_plan.owner.get_patient()
                            print(f"‚úÖ –ü–∞—Ü–∏–µ–Ω—Ç —á–µ—Ä–µ–∑ owner.get_patient(): {patient}")
                            return patient
                    except Exception as e:
                        print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø–∞—Ü–∏–µ–Ω—Ç–∞ —á–µ—Ä–µ–∑ owner: {e}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á–µ—Ä–µ–∑ examination_plan
            elif hasattr(assignment, 'examination_plan'):
                print(f"üîó –ù–∞–π–¥–µ–Ω examination_plan: {assignment.examination_plan}")
                
                # –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º patient_department_status
                if hasattr(assignment.examination_plan, 'patient_department_status') and assignment.examination_plan.patient_department_status:
                    try:
                        patient = assignment.examination_plan.patient_department_status.patient
                        print(f"‚úÖ –ü–∞—Ü–∏–µ–Ω—Ç —á–µ—Ä–µ–∑ patient_department_status: {patient}")
                        return patient
                    except Exception as e:
                        print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø–∞—Ü–∏–µ–Ω—Ç–∞ —á–µ—Ä–µ–∑ patient_department_status: {e}")
                
                # –ó–∞—Ç–µ–º –ø—Ä–æ–≤–µ—Ä—è–µ–º encounter
                if hasattr(assignment.examination_plan, 'encounter') and assignment.examination_plan.encounter:
                    try:
                        patient = assignment.examination_plan.encounter.patient
                        print(f"‚úÖ –ü–∞—Ü–∏–µ–Ω—Ç —á–µ—Ä–µ–∑ encounter: {patient}")
                        return patient
                    except Exception as e:
                        print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø–∞—Ü–∏–µ–Ω—Ç–∞ —á–µ—Ä–µ–∑ encounter: {e}")
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º owner (GenericForeignKey)
                if hasattr(assignment.examination_plan, 'owner') and assignment.examination_plan.owner:
                    try:
                        if hasattr(assignment.examination_plan.owner, 'patient'):
                            patient = assignment.examination_plan.owner.patient
                            print(f"‚úÖ –ü–∞—Ü–∏–µ–Ω—Ç —á–µ—Ä–µ–∑ owner.patient: {patient}")
                            return patient
                        elif hasattr(assignment.examination_plan.owner, 'get_patient'):
                            patient = assignment.examination_plan.owner.get_patient()
                            print(f"‚úÖ –ü–∞—Ü–∏–µ–Ω—Ç —á–µ—Ä–µ–∑ owner.get_patient(): {patient}")
                            return patient
                    except Exception as e:
                        print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø–∞—Ü–∏–µ–Ω—Ç–∞ —á–µ—Ä–µ–∑ owner: {e}")
            
            else:
                print("‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω–æ –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö –∞—Ç—Ä–∏–±—É—Ç–æ–≤ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–∞—Ü–∏–µ–Ω—Ç–∞")
                print(f"üîç –î–æ—Å—Ç—É–ø–Ω—ã–µ –∞—Ç—Ä–∏–±—É—Ç—ã: {[attr for attr in dir(assignment) if not attr.startswith('_')]}")
                
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø–∞—Ü–∏–µ–Ω—Ç–∞: {e}")
            import traceback
            traceback.print_exc()
        return None
    
    @staticmethod
    def _get_department_from_assignment(assignment):
        """–ü–æ–ª—É—á–∞–µ—Ç –æ—Ç–¥–µ–ª–µ–Ω–∏–µ –∏–∑ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è"""
        print(f"üè• _get_department_from_assignment: {assignment}")
        
        try:
            if hasattr(assignment, 'treatment_plan'):
                print(f"üîó –ù–∞–π–¥–µ–Ω treatment_plan: {assignment.treatment_plan}")
                
                if hasattr(assignment.treatment_plan, 'patient_department_status') and assignment.treatment_plan.patient_department_status:
                    try:
                        department = assignment.treatment_plan.patient_department_status.department
                        print(f"‚úÖ –û—Ç–¥–µ–ª–µ–Ω–∏–µ —á–µ—Ä–µ–∑ patient_department_status: {department}")
                        return department
                    except Exception as e:
                        print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –æ—Ç–¥–µ–ª–µ–Ω–∏—è —á–µ—Ä–µ–∑ patient_department_status: {e}")
                
                elif hasattr(assignment.treatment_plan, 'encounter') and assignment.treatment_plan.encounter:
                    try:
                        # –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å –æ—Ç–¥–µ–ª–µ–Ω–∏–µ –∏–∑ —Å–ª—É—á–∞—è –ø–æ—Å—Ç—É–ø–ª–µ–Ω–∏—è
                        encounter = assignment.treatment_plan.encounter
                        print(f"üîç –ü—Ä–æ–≤–µ—Ä—è—é encounter: {encounter}")
                        
                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á–µ—Ä–µ–∑ department_transfer_records (PatientDepartmentStatus)
                        if hasattr(encounter, 'department_transfer_records'):
                            department_records = encounter.department_transfer_records.filter(
                                status__in=['pending', 'accepted']
                            ).order_by('-admission_date')
                            
                            if department_records.exists():
                                department = department_records.first().department
                                print(f"‚úÖ –û—Ç–¥–µ–ª–µ–Ω–∏–µ —á–µ—Ä–µ–∑ department_transfer_records: {department}")
                                return department
                        
                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á–µ—Ä–µ–∑ transfer_to_department
                        if hasattr(encounter, 'transfer_to_department') and encounter.transfer_to_department:
                            department = encounter.transfer_to_department
                            print(f"‚úÖ –û—Ç–¥–µ–ª–µ–Ω–∏–µ —á–µ—Ä–µ–∑ transfer_to_department: {department}")
                            return department
                        
                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á–µ—Ä–µ–∑ source_encounter –≤ PatientDepartmentStatus
                        from departments.models import PatientDepartmentStatus
                        try:
                            patient_status = PatientDepartmentStatus.objects.filter(
                                patient=encounter.patient,
                                status__in=['pending', 'accepted']
                            ).order_by('-admission_date').first()
                            
                            if patient_status:
                                department = patient_status.department
                                print(f"‚úÖ –û—Ç–¥–µ–ª–µ–Ω–∏–µ —á–µ—Ä–µ–∑ PatientDepartmentStatus: {department}")
                                return department
                        except Exception as e:
                            print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –æ—Ç–¥–µ–ª–µ–Ω–∏—è —á–µ—Ä–µ–∑ PatientDepartmentStatus: {e}")
                            
                    except Exception as e:
                        print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –æ—Ç–¥–µ–ª–µ–Ω–∏—è —á–µ—Ä–µ–∑ encounter: {e}")
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º owner (GenericForeignKey)
                if hasattr(assignment.treatment_plan, 'owner') and assignment.treatment_plan.owner:
                    try:
                        if hasattr(assignment.treatment_plan.owner, 'department'):
                            department = assignment.treatment_plan.owner.department
                            print(f"‚úÖ –û—Ç–¥–µ–ª–µ–Ω–∏–µ —á–µ—Ä–µ–∑ owner.department: {department}")
                            return department
                        elif hasattr(assignment.treatment_plan.owner, 'get_department'):
                            department = assignment.treatment_plan.owner.get_department()
                            print(f"‚úÖ –û—Ç–¥–µ–ª–µ–Ω–∏–µ —á–µ—Ä–µ–∑ owner.get_department(): {department}")
                            return department
                    except Exception as e:
                        print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –æ—Ç–¥–µ–ª–µ–Ω–∏—è —á–µ—Ä–µ–∑ owner: {e}")
            
            elif hasattr(assignment, 'examination_plan'):
                print(f"üîó –ù–∞–π–¥–µ–Ω examination_plan: {assignment.examination_plan}")
                
                if hasattr(assignment.examination_plan, 'patient_department_status') and assignment.examination_plan.patient_department_status:
                    try:
                        department = assignment.examination_plan.patient_department_status.department
                        print(f"‚úÖ –û—Ç–¥–µ–ª–µ–Ω–∏–µ —á–µ—Ä–µ–∑ patient_department_status: {department}")
                        return department
                    except Exception as e:
                        print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –æ—Ç–¥–µ–ª–µ–Ω–∏—è —á–µ—Ä–µ–∑ patient_department_status: {e}")
                
                elif hasattr(assignment.examination_plan, 'encounter') and assignment.examination_plan.encounter:
                    try:
                        # –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å –æ—Ç–¥–µ–ª–µ–Ω–∏–µ –∏–∑ —Å–ª—É—á–∞—è –ø–æ—Å—Ç—É–ø–ª–µ–Ω–∏—è
                        encounter = assignment.examination_plan.encounter
                        print(f"üîç –ü—Ä–æ–≤–µ—Ä—è—é encounter: {encounter}")
                        
                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á–µ—Ä–µ–∑ department_transfer_records (PatientDepartmentStatus)
                        if hasattr(encounter, 'department_transfer_records'):
                            department_records = encounter.department_transfer_records.filter(
                                status__in=['pending', 'accepted']
                            ).order_by('-admission_date')
                            
                            if department_records.exists():
                                department = department_records.first().department
                                print(f"‚úÖ –û—Ç–¥–µ–ª–µ–Ω–∏–µ —á–µ—Ä–µ–∑ department_transfer_records: {department}")
                                return department
                        
                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á–µ—Ä–µ–∑ transfer_to_department
                        if hasattr(encounter, 'transfer_to_department') and encounter.transfer_to_department:
                            department = encounter.transfer_to_department
                            print(f"‚úÖ –û—Ç–¥–µ–ª–µ–Ω–∏–µ —á–µ—Ä–µ–∑ transfer_to_department: {department}")
                            return department
                        
                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á–µ—Ä–µ–∑ source_encounter –≤ PatientDepartmentStatus
                        from departments.models import PatientDepartmentStatus
                        try:
                            patient_status = PatientDepartmentStatus.objects.filter(
                                patient=encounter.patient,
                                status__in=['pending', 'accepted']
                            ).order_by('-admission_date').first()
                            
                            if patient_status:
                                department = patient_status.department
                                print(f"‚úÖ –û—Ç–¥–µ–ª–µ–Ω–∏–µ —á–µ—Ä–µ–∑ PatientDepartmentStatus: {department}")
                                return department
                        except Exception as e:
                            print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –æ—Ç–¥–µ–ª–µ–Ω–∏—è —á–µ—Ä–µ–∑ PatientDepartmentStatus: {e}")
                            
                    except Exception as e:
                        print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –æ—Ç–¥–µ–ª–µ–Ω–∏—è —á–µ—Ä–µ–∑ encounter: {e}")
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º owner (GenericForeignKey)
                if hasattr(assignment.examination_plan, 'owner') and assignment.examination_plan.owner:
                    try:
                        if hasattr(assignment.examination_plan.owner, 'department'):
                            department = assignment.examination_plan.owner.department
                            print(f"‚úÖ –û—Ç–¥–µ–ª–µ–Ω–∏–µ —á–µ—Ä–µ–∑ owner.department: {department}")
                            return department
                        elif hasattr(assignment.examination_plan.owner, 'get_department'):
                            department = assignment.examination_plan.owner.get_department()
                            print(f"‚úÖ –û—Ç–¥–µ–ª–µ–Ω–∏–µ —á–µ—Ä–µ–∑ owner.get_department(): {department}")
                            return department
                    except Exception as e:
                        print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –æ—Ç–¥–µ–ª–µ–Ω–∏—è —á–µ—Ä–µ–∑ owner: {e}")
            
            else:
                print("‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω–æ –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö –∞—Ç—Ä–∏–±—É—Ç–æ–≤ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –æ—Ç–¥–µ–ª–µ–Ω–∏—è")
                
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –æ—Ç–¥–µ–ª–µ–Ω–∏—è: {e}")
            import traceback
            traceback.print_exc()
        return None
    
    @staticmethod
    def _get_encounter_from_assignment(assignment):
        """–ü–æ–ª—É—á–∞–µ—Ç —Å–ª—É—á–∞–π –ø–æ—Å—Ç—É–ø–ª–µ–Ω–∏—è –∏–∑ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è"""
        try:
            if hasattr(assignment, 'treatment_plan'):
                if hasattr(assignment.treatment_plan, 'encounter'):
                    return assignment.treatment_plan.encounter
            elif hasattr(assignment, 'examination_plan'):
                if hasattr(assignment.examination_plan, 'encounter'):
                    return assignment.examination_plan.encounter
        except Exception:
            pass
        return None
    
    @staticmethod
    def _create_medication_schedule(assignment, patient, department, encounter, start_date, first_time, times_per_day, duration_days):
        """–°–æ–∑–¥–∞–µ—Ç —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è –ª–µ–∫–∞—Ä—Å—Ç–≤–∞"""
        schedules = []
        current_date = start_date
        
        for day in range(duration_days):
            day_schedules = ClinicalSchedulingService._create_day_schedule(
                assignment, patient, department, encounter, current_date, first_time, times_per_day
            )
            schedules.extend(day_schedules)
            current_date += timedelta(days=1)
        
        return schedules
    
    @staticmethod
    def _create_day_schedule(assignment, patient, department, encounter, date, first_time, times_per_day):
        """–°–æ–∑–¥–∞–µ—Ç —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ –æ–¥–∏–Ω –¥–µ–Ω—å"""
        schedules = []
        content_type = ContentType.objects.get_for_model(assignment)
        
        if times_per_day == 1:
            schedules.append(ScheduledAppointment.objects.create(
                content_type=content_type,
                object_id=assignment.id,
                patient=patient,
                created_department=department,
                encounter=encounter,
                scheduled_date=date,
                scheduled_time=first_time
            ))
        else:
            interval_hours = 24 // times_per_day
            current_time = first_time
            
            # –ü–µ—Ä–≤–æ–µ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–µ –¥–Ω—è
            schedules.append(ScheduledAppointment.objects.create(
                content_type=content_type,
                object_id=assignment.id,
                patient=patient,
                created_department=department,
                encounter=encounter,
                scheduled_date=date,
                scheduled_time=current_time
            ))
            
            # –û—Å—Ç–∞–ª—å–Ω—ã–µ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è –¥–Ω—è
            for i in range(1, times_per_day):
                current_time = ClinicalSchedulingService._add_hours_to_time(current_time, interval_hours)
                schedules.append(ScheduledAppointment.objects.create(
                    content_type=content_type,
                    object_id=assignment.id,
                    patient=patient,
                    created_department=department,
                    encounter=encounter,
                    scheduled_date=date,
                    scheduled_time=current_time
                ))
        
        return schedules
    
    @staticmethod
    def _add_hours_to_time(time_obj, hours):
        """–î–æ–±–∞–≤–ª—è–µ—Ç —á–∞—Å—ã –∫ –≤—Ä–µ–º–µ–Ω–∏, —É—á–∏—Ç—ã–≤–∞—è –ø–µ—Ä–µ—Ö–æ–¥ —á–µ—Ä–µ–∑ –ø–æ–ª–Ω–æ—á—å"""
        total_minutes = time_obj.hour * 60 + time_obj.minute + (hours * 60)
        total_minutes = total_minutes % (24 * 60)
        new_hours = total_minutes // 60
        new_minutes = total_minutes % 60
        return time(new_hours, new_minutes)
    
    @staticmethod
    def _create_lab_test_schedule(assignment, patient, department, encounter, start_date, first_time):
        """–°–æ–∑–¥–∞–µ—Ç —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è –ª–∞–±–æ—Ä–∞—Ç–æ—Ä–Ω–æ–≥–æ –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è"""
        content_type = ContentType.objects.get_for_model(assignment)
        return [ScheduledAppointment.objects.create(
            content_type=content_type,
            object_id=assignment.id,
            patient=patient,
            created_department=department,
            encounter=encounter,
            scheduled_date=start_date,
            scheduled_time=first_time
        )]
    
    @staticmethod
    def _create_procedure_schedule(assignment, patient, department, encounter, start_date, first_time):
        """–°–æ–∑–¥–∞–µ—Ç —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞–ª—å–Ω–æ–≥–æ –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è"""
        content_type = ContentType.objects.get_for_model(assignment)
        return [ScheduledAppointment.objects.create(
            content_type=content_type,
            object_id=assignment.id,
            patient=patient,
            created_department=department,
            encounter=encounter,
            scheduled_date=start_date,
            scheduled_time=first_time
        )]
    
    @staticmethod
    def get_today_schedule(patient=None, department=None, user=None):
        """–ü–æ–ª—É—á–∞–µ—Ç —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è"""
        today = timezone.now().date()
        queryset = ScheduledAppointment.objects.filter(
            scheduled_date=today
        ).select_related('executed_by', 'rejected_by', 'patient', 'created_department')
        
        if patient:
            queryset = queryset.filter(patient=patient)
        
        if department:
            queryset = queryset.filter(created_department=department)
        
        # –§–∏–ª—å—Ç—Ä—É–µ–º –ø–æ –ø—Ä–∞–≤–∞–º –¥–æ—Å—Ç—É–ø–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        if user and not user.is_superuser:
            try:
                user_department = user.department
                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—Å–µ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è, –Ω–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –º–æ–∂–Ω–æ —Ç–æ–ª—å–∫–æ –∏–∑ —Å–≤–æ–µ–≥–æ –æ—Ç–¥–µ–ª–µ–Ω–∏—è
                pass
            except:
                pass
        
        return queryset.order_by('scheduled_time')
    
    @staticmethod
    def get_overdue_appointments(patient=None, department=None, user=None):
        """–ü–æ–ª—É—á–∞–µ—Ç –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã–µ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è"""
        today = timezone.now().date()
        queryset = ScheduledAppointment.objects.filter(
            scheduled_date__lt=today,
            execution_status__in=['scheduled', 'partial']
        ).select_related('executed_by', 'patient', 'created_department')
        
        if patient:
            queryset = queryset.filter(patient=patient)
        
        if department:
            queryset = queryset.filter(created_department=department)
        
        return queryset.order_by('scheduled_date', 'scheduled_time')
    
    @staticmethod
    def get_patient_schedule(patient, start_date=None, end_date=None):
        """–ü–æ–ª—É—á–∞–µ—Ç —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –ø–∞—Ü–∏–µ–Ω—Ç–∞ –∑–∞ –ø–µ—Ä–∏–æ–¥"""
        queryset = ScheduledAppointment.objects.filter(patient=patient)
        
        if start_date:
            queryset = queryset.filter(scheduled_date__gte=start_date)
        
        if end_date:
            queryset = queryset.filter(scheduled_date__lte=end_date)
        
        return queryset.select_related(
            'executed_by', 'rejected_by', 'created_department'
        ).order_by('scheduled_date', 'scheduled_time')