from django.contrib import admin
from django.contrib.auth.models import User
from django.contrib import messages
from django.shortcuts import redirect
from django.urls import path
from django.utils.html import format_html
from django.utils.translation import gettext_lazy as _
from django.db.models import Q
from django.http import HttpResponseRedirect
from django.core.exceptions import PermissionDenied

from .models import Patient, PatientContact, PatientAddress, PatientDocument
from newborns.models import NewbornProfile


@admin.register(Patient)
class PatientAdmin(admin.ModelAdmin):
    list_display = ('full_name', 'birth_date', 'gender', 'patient_type', 'age_display', 'archive_status', 'archive_actions')
    list_filter = ('patient_type', 'gender', 'birth_date', 'is_archived')
    search_fields = ('last_name', 'first_name', 'middle_name')
    date_hierarchy = 'birth_date'
    actions = ['archive_selected', 'restore_selected']
    
    fieldsets = (
        (_('–û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è'), {
            'fields': ('last_name', 'first_name', 'middle_name', 'birth_date', 'gender', 'patient_type')
        }),
        (_('–ê—Ä—Ö–∏–≤–∏—Ä–æ–≤–∞–Ω–∏–µ'), {
            'fields': ('is_archived', 'archived_at', 'archived_by', 'archive_reason'),
            'classes': ('collapse',)
        }),
    )
    
    readonly_fields = ('archived_at', 'archived_by')
    
    def get_queryset(self, request):
        # –ü–æ–ª—É—á–∞–µ–º –±–∞–∑–æ–≤—ã–π queryset –±–µ–∑ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è —Ñ–∏–ª—å—Ç—Ä–æ–≤ Django Admin
        qs = self.model.objects.all()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Ñ–∏–ª—å—Ç—Ä –ø–æ –∞—Ä—Ö–∏–≤–∏—Ä–æ–≤–∞–Ω–∏—é –≤ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞—Ö –∑–∞–ø—Ä–æ—Å–∞
        if 'is_archived__exact' in request.GET:
            # –ï—Å–ª–∏ —Ñ–∏–ª—å—Ç—Ä —É–∫–∞–∑–∞–Ω, –ø—Ä–∏–º–µ–Ω—è–µ–º –µ–≥–æ
            is_archived_value = request.GET.get('is_archived__exact')
            if is_archived_value == '1':
                return qs.filter(is_archived=True)
            elif is_archived_value == '0':
                return qs.filter(is_archived=False)
        elif 'is_archived' in request.GET:
            # –ï—Å–ª–∏ –µ—Å—Ç—å –¥—Ä—É–≥–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∞—Ä—Ö–∏–≤–∏—Ä–æ–≤–∞–Ω–∏—è, –ø—Ä–∏–º–µ–Ω—è–µ–º –∏—Ö
            is_archived_value = request.GET.get('is_archived')
            if is_archived_value == '1':
                return qs.filter(is_archived=True)
            elif is_archived_value == '0':
                return qs.filter(is_archived=False)
        else:
            # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–∞—Ü–∏–µ–Ω—Ç–æ–≤
            return qs.filter(is_archived=False)

    def full_name(self, obj):
        return obj.get_full_name_with_age()
    full_name.short_description = _('–§–ò–û –∏ –≤–æ–∑—Ä–∞—Å—Ç')
    
    def age_display(self, obj):
        age = obj.get_age()
        if age is not None:
            return f"{age} –ª–µ—Ç"
        return "–ù–µ —É–∫–∞–∑–∞–Ω"
    age_display.short_description = _('–í–æ–∑—Ä–∞—Å—Ç')
    
    def archive_status(self, obj):
        if obj.is_archived:
            return format_html('<span style="color: orange;">üì¶ –ê—Ä—Ö–∏–≤–∏—Ä–æ–≤–∞–Ω</span>')
        else:
            return format_html('<span style="color: green;">‚úÖ –ê–∫—Ç–∏–≤–µ–Ω</span>')
    archive_status.short_description = _('–°—Ç–∞—Ç—É—Å')
    
    def archive_actions(self, obj):
        if obj.is_archived:
            return format_html(
                '<a class="button" href="{}">–í–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å</a>',
                f'/admin/patients/patient/{obj.pk}/restore/'
            )
        else:
            return format_html(
                '<a class="button" href="{}">–ê—Ä—Ö–∏–≤–∏—Ä–æ–≤–∞—Ç—å</a>',
                f'/admin/patients/patient/{obj.pk}/archive/'
            )
    archive_actions.short_description = _('–î–µ–π—Å—Ç–≤–∏—è')
    
    def get_urls(self):
        urls = super().get_urls()
        custom_urls = [
            path(
                '<int:patient_id>/archive/',
                self.admin_site.admin_view(self.archive_patient),
                name='patient-archive',
            ),
            path(
                '<int:patient_id>/restore/',
                self.admin_site.admin_view(self.restore_patient),
                name='patient-restore',
            ),
        ]
        return custom_urls + urls

    def archive_patient(self, request, patient_id):
        """–ê—Ä—Ö–∏–≤–∏—Ä—É–µ—Ç –ø–∞—Ü–∏–µ–Ω—Ç–∞"""
        try:
            patient = Patient.objects.get(pk=patient_id)
            if patient.is_archived:
                messages.warning(request, f"–ü–∞—Ü–∏–µ–Ω—Ç {patient} —É–∂–µ –∞—Ä—Ö–∏–≤–∏—Ä–æ–≤–∞–Ω")
            else:
                # –ò—Å–ø–æ–ª—å–∑—É–µ–º —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—É—é —Å–∏—Å—Ç–µ–º—É –∞—Ä—Ö–∏–≤–∏—Ä–æ–≤–∞–Ω–∏—è
                from base.services import ArchiveService
                success = ArchiveService.archive_record(
                    instance=patient,
                    user=request.user,
                    reason="–ê—Ä—Ö–∏–≤–∏—Ä–æ–≤–∞–Ω–∏–µ —á–µ—Ä–µ–∑ Django Admin",
                    request=request,
                    cascade=True
                )
                if success:
                    messages.success(request, f"–ü–∞—Ü–∏–µ–Ω—Ç {patient} —É—Å–ø–µ—à–Ω–æ –∞—Ä—Ö–∏–≤–∏—Ä–æ–≤–∞–Ω")
                else:
                    messages.error(request, f"–ù–µ —É–¥–∞–ª–æ—Å—å –∞—Ä—Ö–∏–≤–∏—Ä–æ–≤–∞—Ç—å –ø–∞—Ü–∏–µ–Ω—Ç–∞ {patient}")
        except Patient.DoesNotExist:
            messages.error(request, "–ü–∞—Ü–∏–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω")
        except Exception as e:
            messages.error(request, f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∞—Ä—Ö–∏–≤–∏—Ä–æ–≤–∞–Ω–∏–∏: {str(e)}")
        
        return HttpResponseRedirect("../")

    def restore_patient(self, request, patient_id):
        """–í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –ø–∞—Ü–∏–µ–Ω—Ç–∞"""
        try:
            patient = Patient.objects.get(pk=patient_id)
            if not patient.is_archived:
                messages.warning(request, f"–ü–∞—Ü–∏–µ–Ω—Ç {patient} –Ω–µ –∞—Ä—Ö–∏–≤–∏—Ä–æ–≤–∞–Ω")
            else:
                # –ò—Å–ø–æ–ª—å–∑—É–µ–º —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—É—é —Å–∏—Å—Ç–µ–º—É –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è
                from base.services import ArchiveService
                success = ArchiveService.restore_record(
                    instance=patient,
                    user=request.user,
                    request=request,
                    cascade=True
                )
                if success:
                    messages.success(request, f"–ü–∞—Ü–∏–µ–Ω—Ç {patient} —É—Å–ø–µ—à–Ω–æ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
                else:
                    messages.error(request, f"–ù–µ —É–¥–∞–ª–æ—Å—å –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø–∞—Ü–∏–µ–Ω—Ç–∞ {patient}")
        except Patient.DoesNotExist:
            messages.error(request, "–ü–∞—Ü–∏–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω")
        except Exception as e:
            messages.error(request, f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–∏: {str(e)}")
        
        return HttpResponseRedirect("../")

    def archive_selected(self, request, queryset):
        """–ê—Ä—Ö–∏–≤–∏—Ä—É–µ—Ç –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –ø–∞—Ü–∏–µ–Ω—Ç–æ–≤"""
        archived_count = 0
        for patient in queryset:
            if not patient.is_archived:
                try:
                    # –ò—Å–ø–æ–ª—å–∑—É–µ–º —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—É—é —Å–∏—Å—Ç–µ–º—É –∞—Ä—Ö–∏–≤–∏—Ä–æ–≤–∞–Ω–∏—è
                    from base.services import ArchiveService
                    success = ArchiveService.archive_record(
                        instance=patient,
                        user=request.user,
                        reason="–ú–∞—Å—Å–æ–≤–æ–µ –∞—Ä—Ö–∏–≤–∏—Ä–æ–≤–∞–Ω–∏–µ —á–µ—Ä–µ–∑ Django Admin",
                        request=request,
                        cascade=True
                    )
                    if success:
                        archived_count += 1
                except Exception as e:
                    messages.error(request, f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∞—Ä—Ö–∏–≤–∏—Ä–æ–≤–∞–Ω–∏–∏ {patient}: {str(e)}")
        
        if archived_count > 0:
            messages.success(request, f"–£—Å–ø–µ—à–Ω–æ –∞—Ä—Ö–∏–≤–∏—Ä–æ–≤–∞–Ω–æ {archived_count} –ø–∞—Ü–∏–µ–Ω—Ç–æ–≤")
        else:
            messages.warning(request, "–ù–µ—Ç –ø–∞—Ü–∏–µ–Ω—Ç–æ–≤ –¥–ª—è –∞—Ä—Ö–∏–≤–∏—Ä–æ–≤–∞–Ω–∏—è")
    
    archive_selected.short_description = _("–ê—Ä—Ö–∏–≤–∏—Ä–æ–≤–∞—Ç—å –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –ø–∞—Ü–∏–µ–Ω—Ç–æ–≤")

    def restore_selected(self, request, queryset):
        """–í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –ø–∞—Ü–∏–µ–Ω—Ç–æ–≤"""
        restored_count = 0
        for patient in queryset:
            if patient.is_archived:
                try:
                    # –ò—Å–ø–æ–ª—å–∑—É–µ–º —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—É—é —Å–∏—Å—Ç–µ–º—É –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è
                    from base.services import ArchiveService
                    success = ArchiveService.restore_record(
                        instance=patient,
                        user=request.user,
                        request=request,
                        cascade=True
                    )
                    if success:
                        restored_count += 1
                except Exception as e:
                    messages.error(request, f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–∏ {patient}: {str(e)}")
        
        if restored_count > 0:
            messages.success(request, f"–£—Å–ø–µ—à–Ω–æ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ {restored_count} –ø–∞—Ü–∏–µ–Ω—Ç–æ–≤")
        else:
            messages.warning(request, "–ù–µ—Ç –ø–∞—Ü–∏–µ–Ω—Ç–æ–≤ –¥–ª—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è")
    
    restore_selected.short_description = _("–í–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –ø–∞—Ü–∏–µ–Ω—Ç–æ–≤")


@admin.register(PatientContact)
class PatientContactAdmin(admin.ModelAdmin):
    list_display = ('patient', 'phone', 'email', 'legal_representative_full_name', 'archive_status')
    list_filter = ('is_archived',)
    search_fields = ('patient__last_name', 'patient__first_name', 'phone', 'email')
    readonly_fields = ('archived_at', 'archived_by')
    
    def get_queryset(self, request):
        # –ü–æ–ª—É—á–∞–µ–º –±–∞–∑–æ–≤—ã–π queryset –±–µ–∑ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è —Ñ–∏–ª—å—Ç—Ä–æ–≤ Django Admin
        qs = self.model.objects.all()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Ñ–∏–ª—å—Ç—Ä –ø–æ –∞—Ä—Ö–∏–≤–∏—Ä–æ–≤–∞–Ω–∏—é –≤ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞—Ö –∑–∞–ø—Ä–æ—Å–∞
        if 'is_archived__exact' in request.GET:
            # –ï—Å–ª–∏ —Ñ–∏–ª—å—Ç—Ä —É–∫–∞–∑–∞–Ω, –ø—Ä–∏–º–µ–Ω—è–µ–º –µ–≥–æ
            is_archived_value = request.GET.get('is_archived__exact')
            if is_archived_value == '1':
                return qs.filter(is_archived=True)
            elif is_archived_value == '0':
                return qs.filter(is_archived=False)
        elif 'is_archived' in request.GET:
            # –ï—Å–ª–∏ –µ—Å—Ç—å –¥—Ä—É–≥–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∞—Ä—Ö–∏–≤–∏—Ä–æ–≤–∞–Ω–∏—è, –ø—Ä–∏–º–µ–Ω—è–µ–º –∏—Ö
            is_archived_value = request.GET.get('is_archived')
            if is_archived_value == '1':
                return qs.filter(is_archived=True)
            elif is_archived_value == '0':
                return qs.filter(is_archived=False)
        else:
            # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –∞–∫—Ç–∏–≤–Ω—ã–µ –∫–æ–Ω—Ç–∞–∫—Ç—ã
            return qs.filter(is_archived=False)

    def archive_status(self, obj):
        if obj.is_archived:
            return format_html('<span style="color: orange;">üì¶ –ê—Ä—Ö–∏–≤–∏—Ä–æ–≤–∞–Ω</span>')
        else:
            return format_html('<span style="color: green;">‚úÖ –ê–∫—Ç–∏–≤–µ–Ω</span>')
    archive_status.short_description = _('–°—Ç–∞—Ç—É—Å')
