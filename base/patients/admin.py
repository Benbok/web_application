from django.contrib import admin
from django.utils.html import format_html
from django.urls import path, reverse
from django.shortcuts import redirect
from django.contrib import messages
from django.http import HttpResponseRedirect
from django.utils.translation import gettext_lazy as _
from .models import Patient, PatientContact, PatientAddress, PatientDocument
from newborns.models import NewbornProfile


class PatientContactInline(admin.StackedInline):
    model = PatientContact
    extra = 0


class PatientAddressInline(admin.StackedInline):
    model = PatientAddress
    extra = 0


class PatientDocumentInline(admin.StackedInline):
    model = PatientDocument
    extra = 0


class NewbornProfileInline(admin.StackedInline):
    model = NewbornProfile
    extra = 0
    verbose_name = "–ü—Ä–æ—Ñ–∏–ª—å –Ω–æ–≤–æ—Ä–æ–∂–¥–µ–Ω–Ω–æ–≥–æ"
    verbose_name_plural = "–ü—Ä–æ—Ñ–∏–ª—å –Ω–æ–≤–æ—Ä–æ–∂–¥–µ–Ω–Ω–æ–≥–æ"
    
    def get_queryset(self, request):
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –¥–ª—è –ø–∞—Ü–∏–µ–Ω—Ç–æ–≤ —Ç–∏–ø–∞ 'newborn'
        qs = super().get_queryset(request)
        return qs.filter(patient__patient_type='newborn')


@admin.register(Patient)
class PatientAdmin(admin.ModelAdmin):
    list_display = ('full_name', 'birth_date', 'gender', 'patient_type', 'age_display', 'archive_status', 'archive_actions')
    list_filter = ('patient_type', 'gender', 'birth_date', 'is_archived')
    search_fields = ('last_name', 'first_name', 'middle_name')
    date_hierarchy = 'birth_date'
    actions = ['archive_selected', 'restore_selected']
    
    fieldsets = (
        ('–û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è', {
            'fields': ('patient_type', 'last_name', 'first_name', 'middle_name', 'birth_date', 'gender')
        }),
        ('–°–≤—è–∑–∏', {
            'fields': ('parents',),
            'classes': ('collapse',)
        }),
        ('–ê—Ä—Ö–∏–≤–∏—Ä–æ–≤–∞–Ω–∏–µ', {
            'fields': ('is_archived', 'archived_at', 'archived_by', 'archive_reason'),
            'classes': ('collapse',)
        }),
    )
    
    readonly_fields = ('archived_at', 'archived_by')
    
    def get_inlines(self, request, obj=None):
        inlines = [PatientContactInline, PatientAddressInline, PatientDocumentInline]
        # –î–æ–±–∞–≤–ª—è–µ–º inline –¥–ª—è –Ω–æ–≤–æ—Ä–æ–∂–¥–µ–Ω–Ω—ã—Ö —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –ø–∞—Ü–∏–µ–Ω—Ç –Ω–æ–≤–æ—Ä–æ–∂–¥–µ–Ω–Ω—ã–π
        if obj and obj.patient_type == 'newborn':
            inlines.append(NewbornProfileInline)
        return inlines
    
    def age_display(self, obj):
        if obj.birth_date:
            from datetime import date
            today = date.today()
            age = today.year - obj.birth_date.year - ((today.month, today.day) < (obj.birth_date.month, obj.birth_date.day))
            if age == 0:
                months = (today.year - obj.birth_date.year) * 12 + today.month - obj.birth_date.month
                if months == 0:
                    days = (today - obj.birth_date).days
                    return f"{days} –¥–Ω–µ–π"
                return f"{months} –º–µ—Å."
            return f"{age} –ª–µ—Ç"
        return "-"
    age_display.short_description = "–í–æ–∑—Ä–∞—Å—Ç"
    
    def archive_status(self, obj):
        if obj.is_archived:
            return format_html(
                '<span style="color: orange; font-weight: bold;">üì¶ –ê—Ä—Ö–∏–≤–∏—Ä–æ–≤–∞–Ω</span>'
            )
        return format_html(
            '<span style="color: green; font-weight: bold;">‚úÖ –ê–∫—Ç–∏–≤–µ–Ω</span>'
        )
    archive_status.short_description = "–°—Ç–∞—Ç—É—Å"
    
    def archive_actions(self, obj):
        if obj.is_archived:
            # –ö–Ω–æ–ø–∫–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è
            restore_url = reverse('admin:patients_patient_restore', args=[obj.pk])
            return format_html(
                '<a class="button" href="{}" style="background-color: #28a745; color: white; padding: 5px 10px; text-decoration: none; border-radius: 3px;">üîÑ –í–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å</a>',
                restore_url
            )
        else:
            # –ö–Ω–æ–ø–∫–∞ –∞—Ä—Ö–∏–≤–∏—Ä–æ–≤–∞–Ω–∏—è
            archive_url = reverse('admin:patients_patient_archive', args=[obj.pk])
            return format_html(
                '<a class="button" href="{}" style="background-color: #ffc107; color: black; padding: 5px 10px; text-decoration: none; border-radius: 3px;">üì¶ –ê—Ä—Ö–∏–≤–∏—Ä–æ–≤–∞—Ç—å</a>',
                archive_url
            )
    archive_actions.short_description = "–î–µ–π—Å—Ç–≤–∏—è"
    
    def get_urls(self):
        urls = super().get_urls()
        custom_urls = [
            path(
                '<int:patient_id>/archive/',
                self.admin_site.admin_view(self.archive_patient),
                name='patients_patient_archive',
            ),
            path(
                '<int:patient_id>/restore/',
                self.admin_site.admin_view(self.restore_patient),
                name='patients_patient_restore',
            ),
        ]
        return custom_urls + urls
    
    def archive_patient(self, request, patient_id):
        """–ê—Ä—Ö–∏–≤–∏—Ä—É–µ—Ç –ø–∞—Ü–∏–µ–Ω—Ç–∞"""
        try:
            patient = Patient.objects.get(pk=patient_id)
            if patient.is_archived:
                messages.warning(request, f"–ü–∞—Ü–∏–µ–Ω—Ç {patient} —É–∂–µ –∞—Ä—Ö–∏–≤–∏—Ä–æ–≤–∞–Ω")
            else:
                # –ê—Ä—Ö–∏–≤–∏—Ä—É–µ–º –ø–∞—Ü–∏–µ–Ω—Ç–∞ –Ω–∞–ø—Ä—è–º—É—é (–æ–±—Ö–æ–¥ –ø—Ä–æ–±–ª–µ–º—ã —Å ArchiveService)
                patient.archive(
                    user=request.user,
                    reason="–ê—Ä—Ö–∏–≤–∏—Ä–æ–≤–∞–Ω–∏–µ —á–µ—Ä–µ–∑ Django Admin"
                )
                success = True
                if success:
                    messages.success(request, f"–ü–∞—Ü–∏–µ–Ω—Ç {patient} —É—Å–ø–µ—à–Ω–æ –∞—Ä—Ö–∏–≤–∏—Ä–æ–≤–∞–Ω")
                else:
                    messages.error(request, f"–ù–µ —É–¥–∞–ª–æ—Å—å –∞—Ä—Ö–∏–≤–∏—Ä–æ–≤–∞—Ç—å –ø–∞—Ü–∏–µ–Ω—Ç–∞ {patient}")
        except Patient.DoesNotExist:
            messages.error(request, "–ü–∞—Ü–∏–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω")
        except Exception as e:
            messages.error(request, f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∞—Ä—Ö–∏–≤–∏—Ä–æ–≤–∞–Ω–∏–∏: {str(e)}")
        
        return HttpResponseRedirect(reverse('admin:patients_patient_changelist'))
    
    def restore_patient(self, request, patient_id):
        """–í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –ø–∞—Ü–∏–µ–Ω—Ç–∞"""
        try:
            patient = Patient.objects.get(pk=patient_id)
            if not patient.is_archived:
                messages.warning(request, f"–ü–∞—Ü–∏–µ–Ω—Ç {patient} –Ω–µ –∞—Ä—Ö–∏–≤–∏—Ä–æ–≤–∞–Ω")
            else:
                # –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–∞—Ü–∏–µ–Ω—Ç–∞ –Ω–∞–ø—Ä—è–º—É—é
                patient.restore(user=request.user)
                success = True
                if success:
                    messages.success(request, f"–ü–∞—Ü–∏–µ–Ω—Ç {patient} —É—Å–ø–µ—à–Ω–æ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
                else:
                    messages.error(request, f"–ù–µ —É–¥–∞–ª–æ—Å—å –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø–∞—Ü–∏–µ–Ω—Ç–∞ {patient}")
        except Patient.DoesNotExist:
            messages.error(request, "–ü–∞—Ü–∏–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω")
        except Exception as e:
            messages.error(request, f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–∏: {str(e)}")
        
        return HttpResponseRedirect(reverse('admin:patients_patient_changelist'))
    
    def archive_selected(self, request, queryset):
        """–ú–∞—Å—Å–æ–≤–æ–µ –∞—Ä—Ö–∏–≤–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –ø–∞—Ü–∏–µ–Ω—Ç–æ–≤"""
        archived_count = 0
        for patient in queryset:
            if not patient.is_archived:
                try:
                    # –ê—Ä—Ö–∏–≤–∏—Ä—É–µ–º –ø–∞—Ü–∏–µ–Ω—Ç–∞ –Ω–∞–ø—Ä—è–º—É—é (–æ–±—Ö–æ–¥ –ø—Ä–æ–±–ª–µ–º—ã —Å ArchiveService)
                    patient.archive(
                        user=request.user,
                        reason="–ú–∞—Å—Å–æ–≤–æ–µ –∞—Ä—Ö–∏–≤–∏—Ä–æ–≤–∞–Ω–∏–µ —á–µ—Ä–µ–∑ Django Admin"
                    )
                    archived_count += 1
                except Exception as e:
                    messages.error(request, f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∞—Ä—Ö–∏–≤–∏—Ä–æ–≤–∞–Ω–∏–∏ {patient}: {str(e)}")
        
        if archived_count > 0:
            messages.success(request, f"–£—Å–ø–µ—à–Ω–æ –∞—Ä—Ö–∏–≤–∏—Ä–æ–≤–∞–Ω–æ {archived_count} –ø–∞—Ü–∏–µ–Ω—Ç–æ–≤")
        else:
            messages.warning(request, "–ù–µ —É–¥–∞–ª–æ—Å—å –∞—Ä—Ö–∏–≤–∏—Ä–æ–≤–∞—Ç—å –Ω–∏ –æ–¥–Ω–æ–≥–æ –ø–∞—Ü–∏–µ–Ω—Ç–∞")
    
    archive_selected.short_description = "–ê—Ä—Ö–∏–≤–∏—Ä–æ–≤–∞—Ç—å –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –ø–∞—Ü–∏–µ–Ω—Ç–æ–≤"
    
    def restore_selected(self, request, queryset):
        """–ú–∞—Å—Å–æ–≤–æ–µ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –ø–∞—Ü–∏–µ–Ω—Ç–æ–≤"""
        restored_count = 0
        for patient in queryset:
            if patient.is_archived:
                try:
                    # –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–∞—Ü–∏–µ–Ω—Ç–∞ –Ω–∞–ø—Ä—è–º—É—é
                    patient.restore(user=request.user)
                    restored_count += 1
                except Exception as e:
                    messages.error(request, f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–∏ {patient}: {str(e)}")
        
        if restored_count > 0:
            messages.success(request, f"–£—Å–ø–µ—à–Ω–æ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ {restored_count} –ø–∞—Ü–∏–µ–Ω—Ç–æ–≤")
        else:
            messages.warning(request, "–ù–µ —É–¥–∞–ª–æ—Å—å –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –Ω–∏ –æ–¥–Ω–æ–≥–æ –ø–∞—Ü–∏–µ–Ω—Ç–∞")
    
    restore_selected.short_description = "–í–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –ø–∞—Ü–∏–µ–Ω—Ç–æ–≤"
    
    def get_queryset(self, request):
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç QuerySet —Å —É—á–µ—Ç–æ–º —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –ø–æ –∞—Ä—Ö–∏–≤–∏—Ä–æ–≤–∞–Ω–∏—é"""
        qs = super().get_queryset(request)
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Ñ–∏–ª—å—Ç—Ä –ø–æ –∞—Ä—Ö–∏–≤–∏—Ä–æ–≤–∞–Ω–∏—é, –µ—Å–ª–∏ –Ω–µ —É–∫–∞–∑–∞–Ω —è–≤–Ω–æ
        if 'is_archived' not in request.GET:
            # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–∞—Ü–∏–µ–Ω—Ç–æ–≤
            qs = qs.filter(is_archived=False)
        
        return qs


@admin.register(PatientContact)
class PatientContactAdmin(admin.ModelAdmin):
    list_display = ('patient', 'phone', 'email', 'legal_representative_full_name', 'archive_status')
    list_filter = ('is_archived',)
    search_fields = ('patient__last_name', 'patient__first_name', 'phone', 'email')
    readonly_fields = ('archived_at', 'archived_by')
    
    fieldsets = (
        ('–û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è', {
            'fields': ('patient', 'phone', 'email')
        }),
        ('–ó–∞–∫–æ–Ω–Ω—ã–π –ø—Ä–µ–¥—Å—Ç–∞–≤–∏—Ç–µ–ª—å', {
            'fields': ('legal_representative_full_name', 'legal_representative_relation', 'legal_representative_contacts')
        }),
        ('–ê—Ä—Ö–∏–≤–∏—Ä–æ–≤–∞–Ω–∏–µ', {
            'fields': ('is_archived', 'archived_at', 'archived_by', 'archive_reason'),
            'classes': ('collapse',)
        }),
    )
    
    def archive_status(self, obj):
        if obj.is_archived:
            return format_html(
                '<span style="color: orange; font-weight: bold;">üì¶ –ê—Ä—Ö–∏–≤–∏—Ä–æ–≤–∞–Ω</span>'
            )
        return format_html(
            '<span style="color: green; font-weight: bold;">‚úÖ –ê–∫—Ç–∏–≤–µ–Ω</span>'
        )
    archive_status.short_description = "–°—Ç–∞—Ç—É—Å"
    
    def get_queryset(self, request):
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç QuerySet —Å —É—á–µ—Ç–æ–º —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –ø–æ –∞—Ä—Ö–∏–≤–∏—Ä–æ–≤–∞–Ω–∏—é"""
        qs = super().get_queryset(request)
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Ñ–∏–ª—å—Ç—Ä –ø–æ –∞—Ä—Ö–∏–≤–∏—Ä–æ–≤–∞–Ω–∏—é, –µ—Å–ª–∏ –Ω–µ —É–∫–∞–∑–∞–Ω —è–≤–Ω–æ
        if 'is_archived' not in request.GET:
            # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –∞–∫—Ç–∏–≤–Ω—ã–µ –∫–æ–Ω—Ç–∞–∫—Ç—ã
            qs = qs.filter(is_archived=False)
        
        return qs
