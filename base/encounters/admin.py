from django.contrib import admin
from django.http import HttpResponseRedirect
from django.urls import path
from django.shortcuts import render, get_object_or_404
from django.contrib import messages
from django.contrib.auth import get_user_model

from .models import Encounter, TreatmentLabTest
from .services.encounter_service import EncounterService
from .forms import EncounterReopenForm, EncounterUndoForm

User = get_user_model()

@admin.register(Encounter)
class EncounterAdmin(admin.ModelAdmin):
    list_display = ('__str__', 'patient', 'date_start', 'is_active', 'is_archived', 'archived_at', 'outcome')
    list_filter = ('is_active', 'is_archived', 'date_start', 'outcome')
    search_fields = ('patient__last_name', 'patient__first_name', 'patient__middle_name')
    actions = ['archive_selected', 'unarchive_selected', 'reopen_selected']
    readonly_fields = ('command_history', 'last_command_info')

    def archive_selected(self, request, queryset):
        for obj in queryset:
            service = EncounterService(obj)
            service.archive_encounter(user=request.user)
        self.message_user(request, f"{queryset.count()} –∑–∞–ø–∏—Å–µ–π –∞—Ä—Ö–∏–≤–∏—Ä–æ–≤–∞–Ω–æ.")
    archive_selected.short_description = "–ê—Ä—Ö–∏–≤–∏—Ä–æ–≤–∞—Ç—å –≤—ã–±—Ä–∞–Ω–Ω—ã–µ"

    def unarchive_selected(self, request, queryset):
        for obj in queryset:
            service = EncounterService(obj)
            service.unarchive_encounter(user=request.user)
        self.message_user(request, f"{queryset.count()} –∑–∞–ø–∏—Å–µ–π –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –∏–∑ –∞—Ä—Ö–∏–≤–∞.")
    unarchive_selected.short_description = "–í–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∏–∑ –∞—Ä—Ö–∏–≤–∞"

    def reopen_selected(self, request, queryset):
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –≤—ã–±—Ä–∞–Ω–Ω—ã–µ —Å–ª—É—á–∞–∏ –≤ –∞–∫—Ç–∏–≤–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ"""
        count = 0
        for obj in queryset:
            if not obj.is_active:
                service = EncounterService(obj)
                if service.reopen_encounter(user=request.user):
                    count += 1
        
        if count > 0:
            self.message_user(request, f"{count} —Å–ª—É—á–∞–µ–≤ –≤–æ–∑–≤—Ä–∞—â–µ–Ω–æ –≤ –∞–∫—Ç–∏–≤–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ.")
        else:
            self.message_user(request, "–ù–µ—Ç —Å–ª—É—á–∞–µ–≤ –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –∞–∫—Ç–∏–≤–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ.", level=messages.WARNING)
    reopen_selected.short_description = "–í–æ–∑–≤—Ä–∞—Ç–∏—Ç—å –≤ –∞–∫—Ç–∏–≤–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ"

    def get_queryset(self, request):
        return self.model.all_objects.get_queryset()
    
    def get_urls(self):
        urls = super().get_urls()
        custom_urls = [
            path(
                '<int:encounter_id>/reopen/',
                self.admin_site.admin_view(self.reopen_encounter_view),
                name='encounter_reopen',
            ),
            path(
                '<int:encounter_id>/undo/',
                self.admin_site.admin_view(self.undo_operation_view),
                name='encounter_undo',
            ),
        ]
        return custom_urls + urls
    
    def reopen_encounter_view(self, request, encounter_id):
        """–ü—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–µ –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ —Å–ª—É—á–∞—è –≤ –∞–∫—Ç–∏–≤–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ"""
        encounter = get_object_or_404(Encounter, id=encounter_id)
        
        if request.method == 'POST':
            form = EncounterReopenForm(encounter, request.POST)
            if form.is_valid():
                try:
                    form.save(user=request.user)
                    messages.success(request, f"–°–ª—É—á–∞–π {encounter} —É—Å–ø–µ—à–Ω–æ –≤–æ–∑–≤—Ä–∞—â–µ–Ω –≤ –∞–∫—Ç–∏–≤–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ.")
                    return HttpResponseRedirect('../')
                except Exception as e:
                    messages.error(request, f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–æ–∑–≤—Ä–∞—Ç–µ —Å–ª—É—á–∞—è: {e}")
        else:
            form = EncounterReopenForm(encounter)
        
        context = {
            'title': f'–í–æ–∑–≤—Ä–∞—Ç —Å–ª—É—á–∞—è {encounter} –≤ –∞–∫—Ç–∏–≤–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ',
            'form': form,
            'encounter': encounter,
        }
        return render(request, 'admin/encounters/encounter/reopen_form.html', context)
    
    def undo_operation_view(self, request, encounter_id):
        """–ü—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–µ –¥–ª—è –æ—Ç–º–µ–Ω—ã –ø–æ—Å–ª–µ–¥–Ω–µ–π –æ–ø–µ—Ä–∞—Ü–∏–∏"""
        encounter = get_object_or_404(Encounter, id=encounter_id)
        
        if request.method == 'POST':
            form = EncounterUndoForm(encounter, request.POST)
            if form.is_valid():
                try:
                    form.save(user=request.user)
                    messages.success(request, f"–ü–æ—Å–ª–µ–¥–Ω—è—è –æ–ø–µ—Ä–∞—Ü–∏—è –¥–ª—è —Å–ª—É—á–∞—è {encounter} —É—Å–ø–µ—à–Ω–æ –æ—Ç–º–µ–Ω–µ–Ω–∞.")
                    return HttpResponseRedirect('../')
                except Exception as e:
                    messages.error(request, f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–º–µ–Ω–µ –æ–ø–µ—Ä–∞—Ü–∏–∏: {e}")
        else:
            form = EncounterUndoForm(encounter)
        
        context = {
            'title': f'–û—Ç–º–µ–Ω–∞ –ø–æ—Å–ª–µ–¥–Ω–µ–π –æ–ø–µ—Ä–∞—Ü–∏–∏ –¥–ª—è —Å–ª—É—á–∞—è {encounter}',
            'form': form,
            'encounter': encounter,
        }
        return render(request, 'admin/encounters/encounter/undo_form.html', context)
    
    def command_history(self, obj):
        """–û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –∏—Å—Ç–æ—Ä–∏—é –∫–æ–º–∞–Ω–¥"""
        service = EncounterService(obj)
        history = service.get_command_history()
        
        if not history:
            return "–ò—Å—Ç–æ—Ä–∏—è –∫–æ–º–∞–Ω–¥ –ø—É—Å—Ç–∞"
        
        history_text = []
        for i, command in enumerate(history[-5:], 1):  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 5 –∫–æ–º–∞–Ω–¥
            status = "‚úÖ" if command['execution_successful'] else "‚ùå"
            history_text.append(f"{i}. {status} {command['description']}")
        
        return "<br>".join(history_text)
    command_history.short_description = "–ò—Å—Ç–æ—Ä–∏—è –∫–æ–º–∞–Ω–¥"
    command_history.allow_tags = True
    
    def last_command_info(self, obj):
        """–û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ—Å–ª–µ–¥–Ω–µ–π –∫–æ–º–∞–Ω–¥–µ"""
        service = EncounterService(obj)
        last_command = service.get_last_command()
        
        if not last_command:
            return "–ù–µ—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö –∫–æ–º–∞–Ω–¥"
        
        status = "‚úÖ" if last_command['execution_successful'] else "‚ùå"
        can_undo = "üîÑ" if last_command['can_undo'] else "‚ùå"
        
        return f"{status} {last_command['description']} {can_undo}"
    last_command_info.short_description = "–ü–æ—Å–ª–µ–¥–Ω—è—è –∫–æ–º–∞–Ω–¥–∞"
    last_command_info.allow_tags = True


@admin.register(TreatmentLabTest)
class TreatmentLabTestAdmin(admin.ModelAdmin):
    list_display = ('get_lab_test_name', 'treatment_plan', 'priority', 'is_active', 'created_at')
    list_filter = ('priority', 'is_active', 'created_at')
    search_fields = ('lab_test__name', 'custom_lab_test', 'treatment_plan__name')
    readonly_fields = ('created_at', 'updated_at')
    
    fieldsets = (
        ('–û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è', {
            'fields': ('treatment_plan', 'lab_test', 'custom_lab_test', 'priority')
        }),
        ('–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ', {
            'fields': ('instructions', 'is_active')
        }),
        ('–°–∏—Å—Ç–µ–º–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è', {
            'fields': ('created_at', 'updated_at'),
            'classes': ('collapse',)
        }),
    )
    
    def get_lab_test_name(self, obj):
        return obj.get_lab_test_name()
    get_lab_test_name.short_description = '–ù–∞–∑–≤–∞–Ω–∏–µ –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è'


