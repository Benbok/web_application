from django.contrib import admin
from django.utils.html import format_html
from .models import (
    MedicationGroup, ReleaseForm, AdministrationMethod, Medication, 
    TradeName, Regimen, PopulationCriteria, DosingInstruction, RegimenAdjustment
)


@admin.register(MedicationGroup)
class MedicationGroupAdmin(admin.ModelAdmin):
    list_display = ('name', 'description_preview')
    search_fields = ('name', 'description')
    list_per_page = 50

    def description_preview(self, obj):
        if obj.description:
            return obj.description[:100] + '...' if len(obj.description) > 100 else obj.description
        return '‚Äî'
    description_preview.short_description = '–û–ø–∏—Å–∞–Ω–∏–µ'


@admin.register(ReleaseForm)
class ReleaseFormAdmin(admin.ModelAdmin):
    list_display = ('name', 'description_preview')
    search_fields = ('name', 'description')
    list_per_page = 50

    def description_preview(self, obj):
        if obj.description:
            return obj.description[:100] + '...' if len(obj.description) > 100 else obj.description
        return '‚Äî'
    description_preview.short_description = '–û–ø–∏—Å–∞–Ω–∏–µ'


@admin.register(AdministrationMethod)
class AdministrationMethodAdmin(admin.ModelAdmin):
    list_display = ('name', 'description_preview')
    search_fields = ('name', 'description')
    list_per_page = 50

    def description_preview(self, obj):
        if obj.description:
            return obj.description[:100] + '...' if len(obj.description) > 100 else obj.description
        return '‚Äî'
    description_preview.short_description = '–û–ø–∏—Å–∞–Ω–∏–µ'


class TradeNameInline(admin.TabularInline):
    model = TradeName
    extra = 0
    fields = ('name', 'medication_group', 'atc_code', 'release_form', 'external_info_link')
    readonly_fields = ('external_info_link',)
    
    def external_info_link(self, obj):
        if obj.external_info_url:
            return format_html('<a href="{}" target="_blank">–°—Å—ã–ª–∫–∞</a>', obj.external_info_url)
        return '‚Äî'
    external_info_link.short_description = '–í–Ω–µ—à–Ω—è—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è'


# –£–±–∏—Ä–∞–µ–º RegimenInline, —Ç–∞–∫ –∫–∞–∫ —É Regimen –Ω–µ—Ç —Å–≤—è–∑–∏ —Å TradeName


@admin.register(Medication)
class MedicationAdmin(admin.ModelAdmin):
    list_display = ('name', 'external_info_link', 'trade_names_count', 'trade_names_link')
    search_fields = ('name',)
    list_per_page = 50
    inlines = [TradeNameInline]

    def external_info_link(self, obj):
        if obj.external_info_url:
            return format_html('<a href="{}" target="_blank">–°—Å—ã–ª–∫–∞</a>', obj.external_info_url)
        return '‚Äî'
    external_info_link.short_description = '–í–Ω–µ—à–Ω—è—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è'

    def trade_names_count(self, obj):
        return obj.trade_names.count()
    trade_names_count.short_description = '–¢–æ—Ä–≥–æ–≤—ã—Ö –Ω–∞–∑–≤–∞–Ω–∏–π'

    def trade_names_link(self, obj):
        count = obj.trade_names.count()
        if count > 0:
            return format_html(
                '<a href="{}?medication__id__exact={}">–ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å {} —Ç–æ—Ä–≥–æ–≤—ã—Ö –Ω–∞–∑–≤–∞–Ω–∏–π</a>',
                '/admin/pharmacy/tradename/',
                obj.id,
                count
            )
        return '–ù–µ—Ç —Ç–æ—Ä–≥–æ–≤—ã—Ö –Ω–∞–∑–≤–∞–Ω–∏–π'
    trade_names_link.short_description = '–î–µ–π—Å—Ç–≤–∏—è'


# TradeNameInline —É–∂–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω –≤—ã—à–µ –¥–ª—è MedicationAdmin


@admin.register(TradeName)
class TradeNameAdmin(admin.ModelAdmin):
    list_display = ('name', 'medication_info', 'medication_group', 'atc_code', 'release_form', 'external_info_link', 'medication_link', 'regimens_link')
    list_filter = ('medication', 'medication_group', 'release_form')
    search_fields = ('name', 'medication__name', 'atc_code')
    autocomplete_fields = ('medication', 'medication_group', 'release_form')
    readonly_fields = ('regimens_info',)
    list_per_page = 50

    def get_fieldsets(self, request, obj=None):
        fieldsets = super().get_fieldsets(request, obj)
        if obj and obj.medication:
            # –î–æ–±–∞–≤–ª—è–µ–º —Å–µ–∫—Ü–∏—é —Å–æ —Å—Ö–µ–º–∞–º–∏ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è
            fieldsets = list(fieldsets) if fieldsets else []
            fieldsets.append(('–°—Ö–µ–º—ã –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è', {
                'fields': ('regimens_info',),
                'classes': ('collapse',),
                'description': '–°—Ö–µ–º—ã –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è –¥–ª—è –ø—Ä–µ–ø–∞—Ä–∞—Ç–∞ (–ú–ù–ù)'
            }))
        return fieldsets

    def regimens_info(self, obj):
        if not obj.medication:
            return '–ù–µ—Ç —Å–≤—è–∑–∞–Ω–Ω–æ–≥–æ –ø—Ä–µ–ø–∞—Ä–∞—Ç–∞'
        
        regimens = obj.medication.regimens.all()
        if not regimens:
            return '–ù–µ—Ç —Å—Ö–µ–º –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è –¥–ª—è —ç—Ç–æ–≥–æ –ø—Ä–µ–ø–∞—Ä–∞—Ç–∞'
        
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –≤—Å—Ç—Ä–æ–µ–Ω–Ω—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ Django admin
        from django.contrib.admin.utils import display_for_field
        
        result = []
        for regimen in regimens:
            # –ó–∞–≥–æ–ª–æ–≤–æ–∫ —Å—Ö–µ–º—ã
            regimen_info = f"üìã {regimen.name}"
            
            # –ü–æ–∫–∞–∑–∞–Ω–∏—è
            indications = regimen.indications.all()[:3]
            if indications:
                indication_codes = [f"{ind.code}" for ind in indications]
                regimen_info += f"\nüè• –ü–æ–∫–∞–∑–∞–Ω–∏—è: {', '.join(indication_codes)}"
                if regimen.indications.count() > 3:
                    regimen_info += f" (–∏ –µ—â–µ {regimen.indications.count() - 3})"
            
            # –ö—Ä–∏—Ç–µ—Ä–∏–∏ –ø–∞—Ü–∏–µ–Ω—Ç–∞
            criteria = regimen.population_criteria.all()
            if criteria:
                regimen_info += f"\nüë• –ö—Ä–∏—Ç–µ—Ä–∏–∏ –ø–∞—Ü–∏–µ–Ω—Ç–∞: {criteria.count()} –≥—Ä—É–ø–ø"
            
            # –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –ø–æ –¥–æ–∑–∏—Ä–æ–≤–∞–Ω–∏—é
            instructions = regimen.dosing_instructions.all()
            if instructions:
                regimen_info += f"\nüíä –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏: {instructions.count()} –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤"
                for instruction in instructions:
                    route = f" ({instruction.route.name})" if instruction.route else ""
                    regimen_info += f"\n  ‚Ä¢ {instruction.get_dose_type_display()}: {instruction.dose_description} - {instruction.frequency_description} - {instruction.duration_description}{route}"
            
            # –ö–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∏
            adjustments = regimen.adjustments.all()
            if adjustments:
                regimen_info += f"\n‚ö†Ô∏è –ö–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∏: {adjustments.count()} —É—Å–ª–æ–≤–∏–π"
            
            result.append(regimen_info)
        
        return format_html('<br><br>'.join(result))
    
    regimens_info.short_description = '–°—Ö–µ–º—ã –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è'

    def medication_info(self, obj):
        if obj.medication:
            medication_text = obj.medication.name
            if obj.medication.external_info_url:
                medication_text = format_html(
                    '<a href="{}" target="_blank">{}</a>',
                    obj.medication.external_info_url,
                    obj.medication.name
                )
            return format_html(
                '<strong>{}</strong><br><small>–ú–ù–ù</small>',
                medication_text
            )
        return '‚Äî'
    medication_info.short_description = '–ü—Ä–µ–ø–∞—Ä–∞—Ç (–ú–ù–ù)'

    def medication_link(self, obj):
        if obj.medication:
            return format_html(
                '<a href="{}">–ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –ø—Ä–µ–ø–∞—Ä–∞—Ç</a>',
                f'/admin/pharmacy/medication/{obj.medication.id}/change/'
            )
        return '‚Äî'
    medication_link.short_description = '–î–µ–π—Å—Ç–≤–∏—è'

    def regimens_link(self, obj):
        if obj.medication:
            count = obj.medication.regimens.count()
            if count > 0:
                return format_html(
                    '<a href="{}?medication__id__exact={}">–ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å {} —Å—Ö–µ–º</a>',
                    '/admin/pharmacy/regimen/',
                    obj.medication.id,
                    count
                )
        return '–ù–µ—Ç —Å—Ö–µ–º'
    regimens_link.short_description = '–°—Ö–µ–º—ã –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è'

    def external_info_link(self, obj):
        if obj.external_info_url:
            return format_html('<a href="{}" target="_blank">–°—Å—ã–ª–∫–∞</a>', obj.external_info_url)
        return '‚Äî'
    external_info_link.short_description = '–í–Ω–µ—à–Ω—è—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è'


class PopulationCriteriaInline(admin.TabularInline):
    model = PopulationCriteria
    extra = 1
    fields = ('name', 'min_age_days', 'max_age_days', 'min_weight_kg', 'max_weight_kg')


class DosingInstructionInline(admin.TabularInline):
    model = DosingInstruction
    extra = 1
    fields = ('dose_type', 'dose_description', 'frequency_description', 'duration_description', 'route')


class RegimenAdjustmentInline(admin.TabularInline):
    model = RegimenAdjustment
    extra = 1
    fields = ('condition', 'adjustment_description')


@admin.register(Regimen)
class RegimenAdmin(admin.ModelAdmin):
    list_display = ('name', 'medication', 'indications_count', 'population_criteria_count', 'dosing_instructions_count')
    list_filter = ('medication', 'indications')
    search_fields = ('name', 'medication__name', 'indications__name', 'indications__code')
    autocomplete_fields = ('medication', 'indications')
    inlines = [PopulationCriteriaInline, DosingInstructionInline, RegimenAdjustmentInline]
    list_per_page = 20

    def indications_count(self, obj):
        return obj.indications.count()
    indications_count.short_description = '–ü–æ–∫–∞–∑–∞–Ω–∏–π'

    def population_criteria_count(self, obj):
        return obj.population_criteria.count()
    population_criteria_count.short_description = '–ö—Ä–∏—Ç–µ—Ä–∏–µ–≤'

    def dosing_instructions_count(self, obj):
        return obj.dosing_instructions.count()
    dosing_instructions_count.short_description = '–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–π'


@admin.register(PopulationCriteria)
class PopulationCriteriaAdmin(admin.ModelAdmin):
    list_display = ('name', 'regimen', 'age_range', 'weight_range')
    list_filter = ('regimen__medication',)
    search_fields = ('name', 'regimen__name', 'regimen__medication__name')
    autocomplete_fields = ('regimen',)
    list_per_page = 50

    def age_range(self, obj):
        if obj.min_age_days and obj.max_age_days:
            return f"{obj.min_age_days}-{obj.max_age_days} –¥–Ω–µ–π"
        elif obj.min_age_days:
            return f"–æ—Ç {obj.min_age_days} –¥–Ω–µ–π"
        elif obj.max_age_days:
            return f"–¥–æ {obj.max_age_days} –¥–Ω–µ–π"
        return '‚Äî'
    age_range.short_description = '–í–æ–∑—Ä–∞—Å—Ç–Ω–æ–π –¥–∏–∞–ø–∞–∑–æ–Ω'

    def weight_range(self, obj):
        if obj.min_weight_kg and obj.max_weight_kg:
            return f"{obj.min_weight_kg}-{obj.max_weight_kg} –∫–≥"
        elif obj.min_weight_kg:
            return f"–æ—Ç {obj.min_weight_kg} –∫–≥"
        elif obj.max_weight_kg:
            return f"–¥–æ {obj.max_weight_kg} –∫–≥"
        return '‚Äî'
    weight_range.short_description = '–í–µ—Å–æ–≤–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è'


@admin.register(DosingInstruction)
class DosingInstructionAdmin(admin.ModelAdmin):
    list_display = ('regimen', 'dose_type', 'dose_description', 'frequency_description', 'duration_description', 'route')
    list_filter = ('dose_type', 'route', 'regimen__medication')
    search_fields = ('regimen__name', 'regimen__medication__name', 'dose_description')
    autocomplete_fields = ('regimen', 'route')
    list_per_page = 50


@admin.register(RegimenAdjustment)
class RegimenAdjustmentAdmin(admin.ModelAdmin):
    list_display = ('regimen', 'condition', 'adjustment_description')
    list_filter = ('regimen__medication',)
    search_fields = ('regimen__name', 'regimen__medication__name', 'condition')
    autocomplete_fields = ('regimen',)
    list_per_page = 50


# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∞–¥–º–∏–Ω–∫–∏
admin.site.site_header = "–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∏–µ –º–µ–¥–∏—Ü–∏–Ω—Å–∫–æ–π —Å–∏—Å—Ç–µ–º—ã"
admin.site.site_title = "–ú–µ–¥–∏—Ü–∏–Ω—Å–∫–∞—è —Å–∏—Å—Ç–µ–º–∞"
admin.site.index_title = "–ü–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è"
