from django.contrib import admin
from django.utils.html import format_html
from django.db.models import Count, Q
from django.contrib.admin import SimpleListFilter
from .models import (
    MedicationGroup, ReleaseForm, AdministrationMethod, Medication, 
    TradeName, Regimen, PopulationCriteria, DosingInstruction, RegimenAdjustment
)


# –ö–∞—Å—Ç–æ–º–Ω—ã–µ —Ñ–∏–ª—å—Ç—Ä—ã
class HasTradeNamesFilter(SimpleListFilter):
    title = '–ù–∞–ª–∏—á–∏–µ —Ç–æ—Ä–≥–æ–≤—ã—Ö –Ω–∞–∑–≤–∞–Ω–∏–π'
    parameter_name = 'has_trade_names'

    def lookups(self, request, model_admin):
        return (
            ('yes', '–ï—Å—Ç—å —Ç–æ—Ä–≥–æ–≤—ã–µ –Ω–∞–∑–≤–∞–Ω–∏—è'),
            ('no', '–ù–µ—Ç —Ç–æ—Ä–≥–æ–≤—ã—Ö –Ω–∞–∑–≤–∞–Ω–∏–π'),
        )

    def queryset(self, request, queryset):
        if self.value() == 'yes':
            return queryset.filter(trade_names__isnull=False).distinct()
        if self.value() == 'no':
            return queryset.filter(trade_names__isnull=True)
        return queryset


class HasRegimensFilter(SimpleListFilter):
    title = '–ù–∞–ª–∏—á–∏–µ —Å—Ö–µ–º –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è'
    parameter_name = 'has_regimens'

    def lookups(self, request, model_admin):
        return (
            ('yes', '–ï—Å—Ç—å —Å—Ö–µ–º—ã –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è'),
            ('no', '–ù–µ—Ç —Å—Ö–µ–º –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è'),
        )

    def queryset(self, request, queryset):
        if self.value() == 'yes':
            return queryset.filter(regimens__isnull=False).distinct()
        if self.value() == 'no':
            return queryset.filter(regimens__isnull=True)
        return queryset


class AgeGroupFilter(SimpleListFilter):
    title = '–í–æ–∑—Ä–∞—Å—Ç–Ω–∞—è –≥—Ä—É–ø–ø–∞'
    parameter_name = 'age_group'

    def lookups(self, request, model_admin):
        return (
            ('children', '–î–µ—Ç–∏ (–¥–æ 18 –ª–µ—Ç)'),
            ('adults', '–í–∑—Ä–æ—Å–ª—ã–µ (18+ –ª–µ—Ç)'),
            ('elderly', '–ü–æ–∂–∏–ª—ã–µ (65+ –ª–µ—Ç)'),
        )

    def queryset(self, request, queryset):
        if self.value() == 'children':
            return queryset.filter(max_age_days__lte=6570)  # 18 –ª–µ—Ç * 365 –¥–Ω–µ–π
        if self.value() == 'adults':
            return queryset.filter(min_age_days__gte=6570)
        if self.value() == 'elderly':
            return queryset.filter(min_age_days__gte=23725)  # 65 –ª–µ—Ç * 365 –¥–Ω–µ–π
        return queryset


# –î–µ–π—Å—Ç–≤–∏—è –¥–ª—è –∞–¥–º–∏–Ω–∫–∏
@admin.register(MedicationGroup)
class MedicationGroupAdmin(admin.ModelAdmin):
    list_display = ('name', 'description_preview', 'medications_count', 'medications_link')
    search_fields = ('name', 'description')
    list_per_page = 50
    actions = ['duplicate_group']
    readonly_fields = ('medications_info',)

    def get_fieldsets(self, request, obj=None):
        fieldsets = super().get_fieldsets(request, obj)
        if obj:
            # –î–æ–±–∞–≤–ª—è–µ–º —Å–µ–∫—Ü–∏—é —Å –ø—Ä–µ–ø–∞—Ä–∞—Ç–∞–º–∏
            fieldsets = list(fieldsets) if fieldsets else []
            fieldsets.append(('–ü—Ä–µ–ø–∞—Ä–∞—Ç—ã –≤ —ç—Ç–æ–π –≥—Ä—É–ø–ø–µ', {
                'fields': ('medications_info',),
                'classes': ('collapse',),
                'description': '–°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –ø—Ä–µ–ø–∞—Ä–∞—Ç–æ–≤, –æ—Ç–Ω–æ—Å—è—â–∏—Ö—Å—è –∫ –¥–∞–Ω–Ω–æ–π –≥—Ä—É–ø–ø–µ'
            }))
        return fieldsets

    def medications_count(self, obj):
        # –ü–æ–ª—É—á–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ—Ä–≥–æ–≤—ã—Ö –Ω–∞–∑–≤–∞–Ω–∏–π –≤ —ç—Ç–æ–π –≥—Ä—É–ø–ø–µ
        return obj.tradename_set.count()
    medications_count.short_description = '–ü—Ä–µ–ø–∞—Ä–∞—Ç–æ–≤ –≤ –≥—Ä—É–ø–ø–µ'

    def medications_link(self, obj):
        count = obj.tradename_set.count()
        if count > 0:
            return format_html(
                '<a href="{}?medication_group__id__exact={}">–ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å {} –ø—Ä–µ–ø–∞—Ä–∞—Ç–æ–≤</a>',
                '/admin/pharmacy/tradename/',
                obj.id,
                count
            )
        return '–ù–µ—Ç –ø—Ä–µ–ø–∞—Ä–∞—Ç–æ–≤'
    medications_link.short_description = '–î–µ–π—Å—Ç–≤–∏—è'

    def medications_info(self, obj):
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Ç–æ—Ä–≥–æ–≤—ã–µ –Ω–∞–∑–≤–∞–Ω–∏—è –≤ —ç—Ç–æ–π –≥—Ä—É–ø–ø–µ
        trade_names = obj.tradename_set.all()
        
        if not trade_names.exists():
            return '–í —ç—Ç–æ–π –≥—Ä—É–ø–ø–µ –Ω–µ—Ç –ø—Ä–µ–ø–∞—Ä–∞—Ç–æ–≤'
        
        result = []
        for trade_name in trade_names:
            medication = trade_name.medication
            
            # –°–æ–∑–¥–∞–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ –ø—Ä–µ–ø–∞—Ä–∞—Ç
            medication_link = format_html(
                '<a href="{}">üíä {}</a>',
                f'/admin/pharmacy/tradename/{trade_name.id}/change/',
                medication.name
            )
            
            result.append(medication_link)
        
        return format_html('<br>'.join(result))
    
    medications_info.short_description = '–ü—Ä–µ–ø–∞—Ä–∞—Ç—ã –≤ –≥—Ä—É–ø–ø–µ'

    def description_preview(self, obj):
        if obj.description:
            return obj.description[:100] + '...' if len(obj.description) > 100 else obj.description
        return '‚Äî'
    description_preview.short_description = '–û–ø–∏—Å–∞–Ω–∏–µ'

    def duplicate_group(self, request, queryset):
        for group in queryset:
            new_group = MedicationGroup.objects.create(
                name=f"{group.name} (–∫–æ–ø–∏—è)",
                description=group.description
            )
        self.message_user(request, f"–°–æ–∑–¥–∞–Ω–æ {queryset.count()} –∫–æ–ø–∏–π –≥—Ä—É–ø–ø")
    duplicate_group.short_description = "–î—É–±–ª–∏—Ä–æ–≤–∞—Ç—å –≤—ã–±—Ä–∞–Ω–Ω—ã–µ –≥—Ä—É–ø–ø—ã"


@admin.register(ReleaseForm)
class ReleaseFormAdmin(admin.ModelAdmin):
    list_display = ('name', 'description_preview', 'medications_count')
    search_fields = ('name', 'description')
    list_per_page = 50

    def medications_count(self, obj):
        # –ü–æ–ª—É—á–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ—Ä–≥–æ–≤—ã—Ö –Ω–∞–∑–≤–∞–Ω–∏–π —Å —ç—Ç–æ–π —Ñ–æ—Ä–º–æ–π –≤—ã–ø—É—Å–∫–∞
        return obj.tradename_set.count()
    medications_count.short_description = '–ü—Ä–µ–ø–∞—Ä–∞—Ç–æ–≤ –≤ —Ñ–æ—Ä–º–µ'

    def description_preview(self, obj):
        if obj.description:
            return obj.description[:100] + '...' if len(obj.description) > 100 else obj.description
        return '‚Äî'
    description_preview.short_description = '–û–ø–∏—Å–∞–Ω–∏–µ'


@admin.register(AdministrationMethod)
class AdministrationMethodAdmin(admin.ModelAdmin):
    list_display = ('name', 'description_preview', 'medications_count', 'medications_link')
    search_fields = ('name', 'description')
    list_per_page = 50
    readonly_fields = ('medications_info',)

    def get_fieldsets(self, request, obj=None):
        fieldsets = super().get_fieldsets(request, obj)
        if obj:
            # –î–æ–±–∞–≤–ª—è–µ–º —Å–µ–∫—Ü–∏—é —Å –ø—Ä–µ–ø–∞—Ä–∞—Ç–∞–º–∏
            fieldsets = list(fieldsets) if fieldsets else []
            fieldsets.append(('–ü—Ä–µ–ø–∞—Ä–∞—Ç—ã —Å —ç—Ç–∏–º —Å–ø–æ—Å–æ–±–æ–º –≤–≤–µ–¥–µ–Ω–∏—è', {
                'fields': ('medications_info',),
                'classes': ('collapse',),
                'description': '–°–ø–∏—Å–æ–∫ –ø—Ä–µ–ø–∞—Ä–∞—Ç–æ–≤, –∏—Å–ø–æ–ª—å–∑—É—é—â–∏—Ö –¥–∞–Ω–Ω—ã–π —Å–ø–æ—Å–æ–± –≤–≤–µ–¥–µ–Ω–∏—è'
            }))
        return fieldsets

    def description_preview(self, obj):
        if obj.description:
            return obj.description[:100] + '...' if len(obj.description) > 100 else obj.description
        return '‚Äî'
    description_preview.short_description = '–û–ø–∏—Å–∞–Ω–∏–µ'

    def medications_count(self, obj):
        # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–µ–ø–∞—Ä–∞—Ç–æ–≤ —á–µ—Ä–µ–∑ —Å—Ö–µ–º—ã –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è
        return DosingInstruction.objects.filter(route=obj).values('regimen__medication').distinct().count()
    medications_count.short_description = '–ü—Ä–µ–ø–∞—Ä–∞—Ç–æ–≤'

    def medications_link(self, obj):
        count = self.medications_count(obj)
        if count > 0:
            return format_html(
                '<a href="{}?route__id__exact={}">–ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å {} –ø—Ä–µ–ø–∞—Ä–∞—Ç–æ–≤</a>',
                '/admin/pharmacy/dosinginstruction/',
                obj.id,
                count
            )
        return '–ù–µ—Ç –ø—Ä–µ–ø–∞—Ä–∞—Ç–æ–≤'
    medications_link.short_description = '–î–µ–π—Å—Ç–≤–∏—è'

    def medications_info(self, obj):
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –ø—Ä–µ–ø–∞—Ä–∞—Ç—ã —á–µ—Ä–µ–∑ —Å—Ö–µ–º—ã –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è
        medications = DosingInstruction.objects.filter(route=obj).values(
            'regimen__medication__name', 
            'regimen__medication__id'
        ).distinct()
        
        if not medications:
            return '–ù–µ—Ç –ø—Ä–µ–ø–∞—Ä–∞—Ç–æ–≤ —Å –¥–∞–Ω–Ω—ã–º —Å–ø–æ—Å–æ–±–æ–º –≤–≤–µ–¥–µ–Ω–∏—è'
        
        result = []
        for med_data in medications:
            medication_name = med_data['regimen__medication__name']
            medication_id = med_data['regimen__medication__id']
            
            # –°–æ–∑–¥–∞–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ –ø—Ä–µ–ø–∞—Ä–∞—Ç
            medication_link = format_html(
                '<a href="{}">üíä {}</a>',
                f'/admin/pharmacy/medication/{medication_id}/change/',
                medication_name
            )
            
            result.append(medication_link)
        
        return format_html('<br>'.join(result))
    
    medications_info.short_description = '–ü—Ä–µ–ø–∞—Ä–∞—Ç—ã'





@admin.register(Medication)
class MedicationAdmin(admin.ModelAdmin):
    list_display = ('name', 'medication_type', 'medication_form', 'is_active', 'external_info_link', 'regimens_count')
    search_fields = ('name', 'trade_name', 'generic_concept__name')
    list_filter = ('is_active', 'medication_form', 'code_system')
    list_per_page = 50
    actions = ['add_external_info_template']
    readonly_fields = ('regimens_info', 'statistics_info')
    
    def get_fieldsets(self, request, obj=None):
        fieldsets = super().get_fieldsets(request, obj)
        if obj:
            # –î–æ–±–∞–≤–ª—è–µ–º —Å–µ–∫—Ü–∏–∏ —Å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π
            fieldsets = list(fieldsets) if fieldsets else []
            fieldsets.extend([
                ('–°—Ö–µ–º—ã –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è', {
                    'fields': ('regimens_info',),
                    'classes': ('collapse',),
                    'description': '–í—Å–µ —Å—Ö–µ–º—ã –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è –ø—Ä–µ–ø–∞—Ä–∞—Ç–∞ —Å –¥–µ—Ç–∞–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π'
                }),
                ('–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞', {
                    'fields': ('statistics_info',),
                    'classes': ('collapse',),
                    'description': '–û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –ø—Ä–µ–ø–∞—Ä–∞—Ç—É'
                })
            ])
        return fieldsets

    def medication_type(self, obj):
        if obj.is_trade_product():
            return f"–¢–æ—Ä–≥–æ–≤—ã–π –ø—Ä–æ–¥—É–∫—Ç ({obj.generic_concept.name})"
        else:
            return "–ú–ù–ù (–¥–µ–π—Å—Ç–≤—É—é—â–µ–µ –≤–µ—â–µ—Å—Ç–≤–æ)"
    medication_type.short_description = '–¢–∏–ø –ø—Ä–µ–ø–∞—Ä–∞—Ç–∞'
    
    def external_info_link(self, obj):
        if obj.external_info_url:
            return format_html('<a href="{}" target="_blank">–°—Å—ã–ª–∫–∞</a>', obj.external_info_url)
        return '‚Äî'
    external_info_link.short_description = '–í–Ω–µ—à–Ω—è—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è'

    def regimens_count(self, obj):
        return obj.regimens.count()
    regimens_count.short_description = '–°—Ö–µ–º –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è'
    
    def regimens_info(self, obj):
        """–î–µ—Ç–∞–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å—Ö–µ–º–∞—Ö –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è"""
        regimens = obj.regimens.all()
        
        if not regimens.exists():
            return '–ù–µ—Ç —Å—Ö–µ–º –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è –¥–ª—è —ç—Ç–æ–≥–æ –ø—Ä–µ–ø–∞—Ä–∞—Ç–∞'
        
        result = []
        for regimen in regimens:
            regimen_info = f"üìã {regimen.name}"
            
            # –ü–æ–∫–∞–∑–∞–Ω–∏—è
            indications = regimen.indications.all()
            if indications:
                indication_codes = [f"{ind.code} - {ind.name}" for ind in indications[:5]]
                regimen_info += f"\nüè• –ü–æ–∫–∞–∑–∞–Ω–∏—è: {', '.join(indication_codes)}"
                if indications.count() > 5:
                    regimen_info += f" (–∏ –µ—â–µ {indications.count() - 5})"
            
            # –ö—Ä–∏—Ç–µ—Ä–∏–∏ –ø–∞—Ü–∏–µ–Ω—Ç–∞
            criteria = regimen.population_criteria.all()
            if criteria:
                regimen_info += f"\nüë• –ö—Ä–∏—Ç–µ—Ä–∏–∏ –ø–∞—Ü–∏–µ–Ω—Ç–∞: {criteria.count()} –≥—Ä—É–ø–ø"
                for criterion in criteria[:3]:
                    age_info = ""
                    if criterion.min_age_days and criterion.max_age_days:
                        age_info = f"{criterion.min_age_days}-{criterion.max_age_days} –¥–Ω–µ–π"
                    elif criterion.min_age_days:
                        age_info = f"–æ—Ç {criterion.min_age_days} –¥–Ω–µ–π"
                    elif criterion.max_age_days:
                        age_info = f"–¥–æ {criterion.max_age_days} –¥–Ω–µ–π"
                    
                    weight_info = ""
                    if criterion.min_weight_kg and criterion.max_weight_kg:
                        weight_info = f"{criterion.min_weight_kg}-{criterion.max_weight_kg} –∫–≥"
                    elif criterion.min_weight_kg:
                        weight_info = f"–æ—Ç {criterion.min_weight_kg} –∫–≥"
                    elif criterion.max_weight_kg:
                        weight_info = f"–¥–æ {criterion.max_weight_kg} –∫–≥"
                    
                    if age_info or weight_info:
                        regimen_info += f"\n  ‚Ä¢ {criterion.name}: {age_info} {weight_info}".strip()
            
            # –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –ø–æ –¥–æ–∑–∏—Ä–æ–≤–∞–Ω–∏—é
            instructions = regimen.dosing_instructions.all()
            if instructions:
                regimen_info += f"\nüíä –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –ø–æ –¥–æ–∑–∏—Ä–æ–≤–∞–Ω–∏—é: {instructions.count()} –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤"
                for instruction in instructions:
                    route = f" ({instruction.route.name})" if instruction.route else ""
                    regimen_info += f"\n  ‚Ä¢ {instruction.get_dose_type_display()}: {instruction.dose_description}"
                    regimen_info += f"\n    –ß–∞—Å—Ç–æ—Ç–∞: {instruction.frequency_description}"
                    regimen_info += f"\n    –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {instruction.duration_description}{route}"
            
            # –ö–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∏
            adjustments = regimen.adjustments.all()
            if adjustments:
                regimen_info += f"\n‚ö†Ô∏è –ö–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∏: {adjustments.count()} —É—Å–ª–æ–≤–∏–π"
                for adjustment in adjustments[:3]:
                    regimen_info += f"\n  ‚Ä¢ {adjustment.condition}: {adjustment.adjustment_description}"
            
            # –°—Å—ã–ª–∫–∞ –Ω–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
            regimen_info += f"\n‚úèÔ∏è <a href='/admin/pharmacy/regimen/{regimen.id}/change/'>–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å—Ö–µ–º—É</a>"
            
            result.append(regimen_info)
        
        return format_html('<br><br>'.join(result))
    
    regimens_info.short_description = '–°—Ö–µ–º—ã –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è'
    
    def statistics_info(self, obj):
        """–û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –ø—Ä–µ–ø–∞—Ä–∞—Ç—É"""
        regimens_count = obj.regimens.count()
        
        # –ü–æ–¥—Å—á–µ—Ç —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –ø–æ–∫–∞–∑–∞–Ω–∏–π
        all_indications = set()
        for regimen in obj.regimens.all():
            all_indications.update(regimen.indications.all())
        indications_count = len(all_indications)
        
        # –ü–æ–¥—Å—á–µ—Ç —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö —Å–ø–æ—Å–æ–±–æ–≤ –≤–≤–µ–¥–µ–Ω–∏—è
        all_routes = set()
        for regimen in obj.regimens.all():
            for instruction in regimen.dosing_instructions.all():
                if instruction.route:
                    all_routes.add(instruction.route)
        routes_count = len(all_routes)
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –ø—Ä–µ–ø–∞—Ä–∞—Ç–∞
        if obj.is_trade_product():
            medication_type = f"–¢–æ—Ä–≥–æ–≤—ã–π –ø—Ä–æ–¥—É–∫—Ç ({obj.generic_concept.name})"
        else:
            medication_type = "–ú–ù–ù (–¥–µ–π—Å—Ç–≤—É—é—â–µ–µ –≤–µ—â–µ—Å—Ç–≤–æ)"
        
        stats = f"""
        üìä <strong>–û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø—Ä–µ–ø–∞—Ä–∞—Ç–∞ "{obj.name}"</strong><br><br>
        
        üíä <strong>–¢–∏–ø –ø—Ä–µ–ø–∞—Ä–∞—Ç–∞:</strong> {medication_type}<br>
        üìã <strong>–°—Ö–µ–º—ã –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è:</strong> {regimens_count}<br>
        üè• <strong>–£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –ø–æ–∫–∞–∑–∞–Ω–∏–π:</strong> {indications_count}<br>
        üíâ <strong>–°–ø–æ—Å–æ–±–æ–≤ –≤–≤–µ–¥–µ–Ω–∏—è:</strong> {routes_count}<br>
        üíä <strong>–§–æ—Ä–º–∞ –≤—ã–ø—É—Å–∫–∞:</strong> {obj.medication_form or '–ù–µ —É–∫–∞–∑–∞–Ω–∞'}<br>
        """
        
        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
        if obj.external_info_url:
            stats += f"<br>üîó <a href='{obj.external_info_url}' target='_blank'>–í–Ω–µ—à–Ω—è—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø—Ä–µ–ø–∞—Ä–∞—Ç–µ</a>"
        
        return format_html(stats)
    
    statistics_info.short_description = '–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞'

    def add_external_info_template(self, request, queryset):
        updated = 0
        for medication in queryset:
            if not medication.external_info_url:
                # –°–æ–∑–¥–∞–µ–º —à–∞–±–ª–æ–Ω–Ω—É—é —Å—Å—ã–ª–∫—É –Ω–∞ –ø–æ–∏—Å–∫ –≤ Google
                search_query = f"{medication.name} –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –ø–æ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—é"
                google_search_url = f"https://www.google.com/search?q={search_query.replace(' ', '+')}"
                medication.external_info_url = google_search_url
                medication.save()
                updated += 1
        self.message_user(request, f"–î–æ–±–∞–≤–ª–µ–Ω–æ {updated} —Å—Å—ã–ª–æ–∫ –Ω–∞ –≤–Ω–µ—à–Ω—é—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é")
    add_external_info_template.short_description = "–î–æ–±–∞–≤–∏—Ç—å —Å—Å—ã–ª–∫–∏ –Ω–∞ –≤–Ω–µ—à–Ω—é—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é"


@admin.register(TradeName)
class TradeNameAdmin(admin.ModelAdmin):
    list_display = ('name', 'medication_info', 'medication_group', 'atc_code', 'release_form', 'external_info_link', 'medication_link', 'regimens_link')
    list_filter = ('medication', 'medication_group', 'release_form')
    search_fields = ('name', 'medication__name', 'atc_code')
    autocomplete_fields = ('medication', 'medication_group', 'release_form')
    readonly_fields = ('regimens_info',)
    list_per_page = 50

    def get_fieldsets(self, request, obj=None):
        fieldsets = super().get_fieldsets(request, obj)
        if obj and obj.medication:
            # –î–æ–±–∞–≤–ª—è–µ–º —Å–µ–∫—Ü–∏—é —Å–æ —Å—Ö–µ–º–∞–º–∏ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è
            fieldsets = list(fieldsets) if fieldsets else []
            fieldsets.append(('–°—Ö–µ–º—ã –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è', {
                'fields': ('regimens_info',),
                'classes': ('collapse',),
                'description': '–°—Ö–µ–º—ã –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è –¥–ª—è –ø—Ä–µ–ø–∞—Ä–∞—Ç–∞ (–ú–ù–ù)'
            }))
        return fieldsets

    def regimens_info(self, obj):
        if not obj.medication:
            return '–ù–µ—Ç —Å–≤—è–∑–∞–Ω–Ω–æ–≥–æ –ø—Ä–µ–ø–∞—Ä–∞—Ç–∞'
        
        regimens = obj.medication.regimens.all()
        if not regimens:
            return '–ù–µ—Ç —Å—Ö–µ–º –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è –¥–ª—è —ç—Ç–æ–≥–æ –ø—Ä–µ–ø–∞—Ä–∞—Ç–∞'
        
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –≤—Å—Ç—Ä–æ–µ–Ω–Ω—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ Django admin
        from django.contrib.admin.utils import display_for_field
        
        result = []
        for regimen in regimens:
            # –ó–∞–≥–æ–ª–æ–≤–æ–∫ —Å—Ö–µ–º—ã
            regimen_info = f"üìã {regimen.name}"
            
            # –ü–æ–∫–∞–∑–∞–Ω–∏—è
            indications = regimen.indications.all()[:3]
            if indications:
                indication_codes = [f"{ind.code}" for ind in indications]
                regimen_info += f"\nüè• –ü–æ–∫–∞–∑–∞–Ω–∏—è: {', '.join(indication_codes)}"
                if regimen.indications.count() > 3:
                    regimen_info += f" (–∏ –µ—â–µ {regimen.indications.count() - 3})"
            
            # –ö—Ä–∏—Ç–µ—Ä–∏–∏ –ø–∞—Ü–∏–µ–Ω—Ç–∞
            criteria = regimen.population_criteria.all()
            if criteria:
                regimen_info += f"\nüë• –ö—Ä–∏—Ç–µ—Ä–∏–∏ –ø–∞—Ü–∏–µ–Ω—Ç–∞: {criteria.count()} –≥—Ä—É–ø–ø"
            
            # –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –ø–æ –¥–æ–∑–∏—Ä–æ–≤–∞–Ω–∏—é
            instructions = regimen.dosing_instructions.all()
            if instructions:
                regimen_info += f"\nüíä –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏: {instructions.count()} –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤"
                for instruction in instructions:
                    route = f" ({instruction.route.name})" if instruction.route else ""
                    regimen_info += f"\n  ‚Ä¢ {instruction.get_dose_type_display()}: {instruction.dose_description} - {instruction.frequency_description} - {instruction.duration_description}{route}"
            
            # –ö–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∏
            adjustments = regimen.adjustments.all()
            if adjustments:
                regimen_info += f"\n‚ö†Ô∏è –ö–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∏: {adjustments.count()} —É—Å–ª–æ–≤–∏–π"
            
            result.append(regimen_info)
        
        return format_html('<br><br>'.join(result))
    
    regimens_info.short_description = '–°—Ö–µ–º—ã –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è'

    def medication_info(self, obj):
        if obj.medication:
            medication_text = obj.medication.name
            if obj.medication.external_info_url:
                medication_text = format_html(
                    '<a href="{}" target="_blank">{}</a>',
                    obj.medication.external_info_url,
                    obj.medication.name
                )
            return format_html(
                '<strong>{}</strong><br><small>–ú–ù–ù</small>',
                medication_text
            )
        return '‚Äî'
    medication_info.short_description = '–ü—Ä–µ–ø–∞—Ä–∞—Ç (–ú–ù–ù)'

    def medication_link(self, obj):
        if obj.medication:
            return format_html(
                '<a href="{}">–ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –ø—Ä–µ–ø–∞—Ä–∞—Ç</a>',
                f'/admin/pharmacy/medication/{obj.medication.id}/change/'
            )
        return '‚Äî'
    medication_link.short_description = '–î–µ–π—Å—Ç–≤–∏—è'

    def regimens_link(self, obj):
        if obj.medication:
            count = obj.medication.regimens.count()
            if count > 0:
                return format_html(
                    '<a href="{}?medication__id__exact={}">–ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å {} —Å—Ö–µ–º</a>',
                    '/admin/pharmacy/regimen/',
                    obj.medication.id,
                    count
                )
        return '–ù–µ—Ç —Å—Ö–µ–º'
    regimens_link.short_description = '–°—Ö–µ–º—ã –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è'

    def external_info_link(self, obj):
        if obj.external_info_url:
            return format_html('<a href="{}" target="_blank">–°—Å—ã–ª–∫–∞</a>', obj.external_info_url)
        return '‚Äî'
    external_info_link.short_description = '–í–Ω–µ—à–Ω—è—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è'


class PopulationCriteriaInline(admin.TabularInline):
    model = PopulationCriteria
    extra = 1
    fields = ('name', 'min_age_days', 'max_age_days', 'min_weight_kg', 'max_weight_kg')


class DosingInstructionInline(admin.TabularInline):
    model = DosingInstruction
    extra = 1
    fields = ('dose_type', 'dose_description', 'frequency_description', 'duration_description', 'route', 'compatible_forms')


class RegimenAdjustmentInline(admin.TabularInline):
    model = RegimenAdjustment
    extra = 1
    fields = ('condition', 'adjustment_description')


@admin.register(Regimen)
class RegimenAdmin(admin.ModelAdmin):
    list_display = ('name', 'medication', 'indications_count', 'population_criteria_count', 'dosing_instructions_count', 'completeness_score')
    list_filter = ('medication', 'indications', 'dosing_instructions__dose_type')
    search_fields = ('name', 'medication__name', 'indications__name', 'indications__code')
    autocomplete_fields = ('medication', 'indications')
    inlines = [PopulationCriteriaInline, DosingInstructionInline, RegimenAdjustmentInline]
    list_per_page = 20
    actions = ['duplicate_regimen']

    def indications_count(self, obj):
        return obj.indications.count()
    indications_count.short_description = '–ü–æ–∫–∞–∑–∞–Ω–∏–π'

    def population_criteria_count(self, obj):
        return obj.population_criteria.count()
    population_criteria_count.short_description = '–ö—Ä–∏—Ç–µ—Ä–∏–µ–≤'

    def dosing_instructions_count(self, obj):
        return obj.dosing_instructions.count()
    dosing_instructions_count.short_description = '–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–π'

    def completeness_score(self, obj):
        """–û—Ü–µ–Ω–∫–∞ –ø–æ–ª–Ω–æ—Ç—ã —Å—Ö–µ–º—ã (0-100%)"""
        score = 0
        total = 4  # –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
        
        if obj.indications.exists():
            score += 1
        if obj.population_criteria.exists():
            score += 1
        if obj.dosing_instructions.exists():
            score += 1
        if obj.adjustments.exists():
            score += 1
        
        percentage = (score / total) * 100
        
        if percentage >= 75:
            color = 'green'
        elif percentage >= 50:
            color = 'orange'
        else:
            color = 'red'
        
        return format_html(
            '<span style="color: {}; font-weight: bold;">{}%</span>',
            color,
            int(percentage)
        )
    completeness_score.short_description = '–ü–æ–ª–Ω–æ—Ç–∞'

    def duplicate_regimen(self, request, queryset):
        for regimen in queryset:
            # –°–æ–∑–¥–∞–µ–º –∫–æ–ø–∏—é —Å—Ö–µ–º—ã
            new_regimen = Regimen.objects.create(
                medication=regimen.medication,
                name=f"{regimen.name} (–∫–æ–ø–∏—è)",
                notes=regimen.notes
            )
            
            # –ö–æ–ø–∏—Ä—É–µ–º –ø–æ–∫–∞–∑–∞–Ω–∏—è
            new_regimen.indications.set(regimen.indications.all())
            
            # –ö–æ–ø–∏—Ä—É–µ–º –∫—Ä–∏—Ç–µ—Ä–∏–∏ –ø–∞—Ü–∏–µ–Ω—Ç–∞
            for criteria in regimen.population_criteria.all():
                PopulationCriteria.objects.create(
                    regimen=new_regimen,
                    name=criteria.name,
                    min_age_days=criteria.min_age_days,
                    max_age_days=criteria.max_age_days,
                    min_weight_kg=criteria.min_weight_kg,
                    max_weight_kg=criteria.max_weight_kg
                )
            
            # –ö–æ–ø–∏—Ä—É–µ–º –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –ø–æ –¥–æ–∑–∏—Ä–æ–≤–∞–Ω–∏—é
            for instruction in regimen.dosing_instructions.all():
                DosingInstruction.objects.create(
                    regimen=new_regimen,
                    dose_type=instruction.dose_type,
                    dose_description=instruction.dose_description,
                    frequency_description=instruction.frequency_description,
                    duration_description=instruction.duration_description,
                    route=instruction.route
                )
            
            # –ö–æ–ø–∏—Ä—É–µ–º –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∏
            for adjustment in regimen.adjustments.all():
                RegimenAdjustment.objects.create(
                    regimen=new_regimen,
                    condition=adjustment.condition,
                    adjustment_description=adjustment.adjustment_description
                )
        
        self.message_user(request, f"–°–æ–∑–¥–∞–Ω–æ {queryset.count()} –∫–æ–ø–∏–π —Å—Ö–µ–º")
    duplicate_regimen.short_description = "–î—É–±–ª–∏—Ä–æ–≤–∞—Ç—å –≤—ã–±—Ä–∞–Ω–Ω—ã–µ —Å—Ö–µ–º—ã"


@admin.register(PopulationCriteria)
class PopulationCriteriaAdmin(admin.ModelAdmin):
    list_display = ('name', 'regimen', 'age_range', 'weight_range', 'patient_count_estimate')
    list_filter = ('regimen__medication', AgeGroupFilter)
    search_fields = ('name', 'regimen__name', 'regimen__medication__name')
    autocomplete_fields = ('regimen',)
    list_per_page = 50

    def age_range(self, obj):
        if obj.min_age_days and obj.max_age_days:
            return f"{obj.min_age_days}-{obj.max_age_days} –¥–Ω–µ–π"
        elif obj.min_age_days:
            return f"–æ—Ç {obj.min_age_days} –¥–Ω–µ–π"
        elif obj.max_age_days:
            return f"–¥–æ {obj.max_age_days} –¥–Ω–µ–π"
        return '‚Äî'
    age_range.short_description = '–í–æ–∑—Ä–∞—Å—Ç–Ω–æ–π –¥–∏–∞–ø–∞–∑–æ–Ω'

    def weight_range(self, obj):
        if obj.min_weight_kg and obj.max_weight_kg:
            return f"{obj.min_weight_kg}-{obj.max_weight_kg} –∫–≥"
        elif obj.min_weight_kg:
            return f"–æ—Ç {obj.min_weight_kg} –∫–≥"
        elif obj.max_weight_kg:
            return f"–¥–æ {obj.max_weight_kg} –∫–≥"
        return '‚Äî'
    weight_range.short_description = '–í–µ—Å–æ–≤–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è'

    def patient_count_estimate(self, obj):
        """–ü—Ä–∏–º–µ—Ä–Ω–∞—è –æ—Ü–µ–Ω–∫–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –ø–∞—Ü–∏–µ–Ω—Ç–æ–≤, –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö –ø–æ–¥ –∫—Ä–∏—Ç–µ—Ä–∏–∏"""
        # –≠—Ç–æ —É–ø—Ä–æ—â–µ–Ω–Ω–∞—è –æ—Ü–µ–Ω–∫–∞ –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏
        if obj.min_age_days and obj.max_age_days:
            age_range = obj.max_age_days - obj.min_age_days
            if age_range < 365:  # –ú–µ–Ω—å—à–µ –≥–æ–¥–∞
                return "–ù–µ–±–æ–ª—å—à–∞—è –≥—Ä—É–ø–ø–∞"
            elif age_range < 3650:  # –ú–µ–Ω—å—à–µ 10 –ª–µ—Ç
                return "–°—Ä–µ–¥–Ω—è—è –≥—Ä—É–ø–ø–∞"
            else:
                return "–ë–æ–ª—å—à–∞—è –≥—Ä—É–ø–ø–∞"
        return "–ù–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–æ"
    patient_count_estimate.short_description = '–û—Ü–µ–Ω–∫–∞ –≥—Ä—É–ø–ø—ã'


@admin.register(DosingInstruction)
class DosingInstructionAdmin(admin.ModelAdmin):
    list_display = ('regimen', 'dose_type', 'dose_description', 'frequency_description', 'duration_description', 'route', 'compatible_forms_count', 'completeness_indicator')
    list_filter = ('dose_type', 'route', 'regimen__medication', 'compatible_forms')
    search_fields = ('regimen__name', 'regimen__medication__name', 'dose_description')
    autocomplete_fields = ('regimen', 'route', 'compatible_forms')
    list_per_page = 50

    def compatible_forms_count(self, obj):
        """–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–≤–º–µ—Å—Ç–∏–º—ã—Ö —Ñ–æ—Ä–º –≤—ã–ø—É—Å–∫–∞"""
        count = obj.compatible_forms.count()
        if count == 0:
            return format_html('<span style="color: gray;">–í—Å–µ —Ñ–æ—Ä–º—ã</span>')
        else:
            return format_html('<span style="color: blue;">{} —Ñ–æ—Ä–º</span>', count)
    compatible_forms_count.short_description = '–°–æ–≤–º–µ—Å—Ç–∏–º—ã–µ —Ñ–æ—Ä–º—ã'

    def completeness_indicator(self, obj):
        """–ò–Ω–¥–∏–∫–∞—Ç–æ—Ä –ø–æ–ª–Ω–æ—Ç—ã –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏"""
        missing_fields = []
        if not obj.dose_description:
            missing_fields.append('–¥–æ–∑–∞')
        if not obj.frequency_description:
            missing_fields.append('—á–∞—Å—Ç–æ—Ç–∞')
        if not obj.duration_description:
            missing_fields.append('–¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å')
        
        if not missing_fields:
            return format_html('<span style="color: green;">‚úì –ü–æ–ª–Ω–∞—è</span>')
        else:
            return format_html(
                '<span style="color: orange;">‚ö† –ù–µ–ø–æ–ª–Ω–∞—è ({})</span>',
                ', '.join(missing_fields)
            )
    completeness_indicator.short_description = '–°—Ç–∞—Ç—É—Å'


@admin.register(RegimenAdjustment)
class RegimenAdjustmentAdmin(admin.ModelAdmin):
    list_display = ('regimen', 'condition', 'adjustment_description', 'condition_type')
    list_filter = ('regimen__medication',)
    search_fields = ('regimen__name', 'regimen__medication__name', 'condition')
    autocomplete_fields = ('regimen',)
    list_per_page = 50

    def condition_type(self, obj):
        """–û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ç–∏–ø–∞ —É—Å–ª–æ–≤–∏—è –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∏"""
        condition_lower = obj.condition.lower()
        if '–ø–æ—á–∫' in condition_lower or '–∫–∫' in condition_lower or '–∫—Ä–µ–∞—Ç–∏–Ω–∏–Ω' in condition_lower:
            return "–ü–æ—á–µ—á–Ω–∞—è –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ—Å—Ç—å"
        elif '–ø–µ—á–µ–Ω' in condition_lower or '–∞–ª—Ç' in condition_lower or '–∞—Å—Ç' in condition_lower:
            return "–ü–µ—á–µ–Ω–æ—á–Ω–∞—è –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ—Å—Ç—å"
        elif '–≥–µ–º–æ–¥–∏–∞–ª–∏–∑' in condition_lower or '–¥–∏–∞–ª–∏–∑' in condition_lower:
            return "–ì–µ–º–æ–¥–∏–∞–ª–∏–∑"
        elif '–≤–æ–∑—Ä–∞—Å—Ç' in condition_lower or '–ø–æ–∂–∏–ª' in condition_lower:
            return "–í–æ–∑—Ä–∞—Å—Ç–Ω—ã–µ –æ—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏"
        elif '–±–µ—Ä–µ–º–µ–Ω' in condition_lower or '–ª–∞–∫—Ç–∞—Ü' in condition_lower:
            return "–ë–µ—Ä–µ–º–µ–Ω–Ω–æ—Å—Ç—å/–ª–∞–∫—Ç–∞—Ü–∏—è"
        else:
            return "–î—Ä—É–≥–æ–µ"
    condition_type.short_description = '–¢–∏–ø —É—Å–ª–æ–≤–∏—è'


# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∞–¥–º–∏–Ω–∫–∏
admin.site.site_header = "–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∏–µ –º–µ–¥–∏—Ü–∏–Ω—Å–∫–æ–π —Å–∏—Å—Ç–µ–º—ã"
admin.site.site_title = "–ú–µ–¥–∏—Ü–∏–Ω—Å–∫–∞—è —Å–∏—Å—Ç–µ–º–∞"
admin.site.index_title = "–ü–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è"
