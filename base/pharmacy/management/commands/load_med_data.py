# pharmacy/management/commands/load_med_data.py
import os
import yaml
from django.core.management.base import BaseCommand, CommandError
from django.db import transaction
from pharmacy.models import (
    MedicationGroup, ReleaseForm, AdministrationMethod, Medication,
    TradeName, Regimen, PopulationCriteria, DosingInstruction,
    RegimenAdjustment
)
# –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –º–æ–¥–µ–ª—å –î–∏–∞–≥–Ω–æ–∑–æ–≤ –∏–º–ø–æ—Ä—Ç–∏—Ä—É–µ—Ç—Å—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ
from diagnosis.models import Diagnosis

class Command(BaseCommand):
    
    help = '–ó–∞–≥—Ä—É–∂–∞–µ—Ç –ø–æ–ª–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –æ –ø—Ä–µ–ø–∞—Ä–∞—Ç–∞—Ö –∏–∑ –º–Ω–æ–≥–æ–¥–æ–∫—É–º–µ–Ω—Ç–Ω–æ–≥–æ YAML —Ñ–∞–π–ª–∞ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö.'

    def add_arguments(self, parser):
        parser.add_argument('yaml_file', type=str, help='–ü—É—Ç—å –∫ YAML —Ñ–∞–π–ª—É —Å –¥–∞–Ω–Ω—ã–º–∏')
        parser.add_argument(
            '--force',
            action='store_true',
            help='–ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ —É–¥–∞–ª–∏—Ç—å –∏ –ø–µ—Ä–µ—Å–æ–∑–¥–∞—Ç—å –≤—Å–µ —Å–≤—è–∑–∞–Ω–Ω—ã–µ –∑–∞–ø–∏—Å–∏.'
        )

    def _parse_multi_document_yaml(self, file_path):
        """
        –ü–∞—Ä—Å–∏—Ç YAML —Ñ–∞–π–ª —Å –Ω–µ—Å–∫–æ–ª—å–∫–∏–º–∏ –¥–æ–∫—É–º–µ–Ω—Ç–∞–º–∏ (—Ä–∞–∑–¥–µ–ª–µ–Ω–Ω—ã–º–∏ '---')
        –∏ –æ–±—ä–µ–¥–∏–Ω—è–µ—Ç –¥–∞–Ω–Ω—ã–µ –∏–∑ –≤—Å–µ—Ö –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –≤ –µ–¥–∏–Ω—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É.
        """
        self.stdout.write("üîç –ù–∞—á–∏–Ω–∞—é –ø–∞—Ä—Å–∏–Ω–≥ –º–Ω–æ–≥–æ–¥–æ–∫—É–º–µ–Ω—Ç–Ω–æ–≥–æ YAML —Ñ–∞–π–ª–∞...")
        
        # –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –¥–ª—è —Å–±–æ—Ä–∞ –¥–∞–Ω–Ω—ã—Ö –∏–∑ –≤—Å–µ—Ö –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤
        merged_data = {
            'medication_groups': [],
            'release_forms': [],
            'administration_methods': [],
            'medications': [],
            'trade_names': [],
            'regimens': []
        }
        
        processed_groups = set()
        processed_forms = set()
        processed_methods = set()

        try:
            with open(file_path, 'r', encoding='utf-8') as file:
                # yaml.safe_load_all —á–∏—Ç–∞–µ—Ç –≤—Å–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã –∏–∑ —Ñ–∞–π–ª–∞, —Ä–∞–∑–¥–µ–ª–µ–Ω–Ω—ã–µ '---'
                self.stdout.write("   üìñ –ß–∏—Ç–∞—é YAML —Ñ–∞–π–ª...")
                yaml_documents = yaml.safe_load_all(file)
                
                self.stdout.write(f"   üìä –¢–∏–ø yaml_documents: {type(yaml_documents)}")
                
                if yaml_documents is None:
                    self.stdout.write(self.style.WARNING("‚ö†Ô∏è  YAML —Ñ–∞–π–ª –ø—É—Å—Ç –∏–ª–∏ –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤"))
                    return merged_data
                
                # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ —Å–ø–∏—Å–æ–∫ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
                yaml_documents = list(yaml_documents)
                self.stdout.write(f"   üìä –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤: {len(yaml_documents)}")
                
                for i, doc in enumerate(yaml_documents):
                    self.stdout.write(f"   üìÑ –î–æ–∫—É–º–µ–Ω—Ç {i+1}: {type(doc)}")
                    if not doc:
                        self.stdout.write(f"   ‚ö†Ô∏è  –î–æ–∫—É–º–µ–Ω—Ç {i+1} –ø—É—Å—Ç–æ–π, –ø—Ä–æ–ø—É—Å–∫–∞—é")
                        continue
                    
                    self.stdout.write(f"   üîç –ö–ª—é—á–∏ –≤ –¥–æ–∫—É–º–µ–Ω—Ç–µ {i+1}: {list(doc.keys())}")
                    
                    # –°–æ–±–∏—Ä–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ —Å–ø—Ä–∞–≤–æ—á–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
                    for group in doc.get('medication_groups', []) or []:
                        if group and isinstance(group, dict) and group.get('name'):
                            if group['name'] not in processed_groups:
                                merged_data['medication_groups'].append(group)
                                processed_groups.add(group['name'])
                    
                    for form in doc.get('release_forms', []) or []:
                        if form and isinstance(form, dict) and form.get('name'):
                            if form['name'] not in processed_forms:
                                merged_data['release_forms'].append(form)
                                processed_forms.add(form['name'])

                    for method in doc.get('administration_methods', []) or []:
                        if method and isinstance(method, dict) and method.get('name'):
                            if method['name'] not in processed_methods:
                                merged_data['administration_methods'].append(method)
                                processed_methods.add(method['name'])

                    # –î–æ–±–∞–≤–ª—è–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
                    for key in ['medications', 'trade_names', 'regimens']:
                        try:
                            if key in doc and doc[key] and isinstance(doc[key], list):
                                self.stdout.write(f"   üìù –î–æ–±–∞–≤–ª—è—é {len(doc[key])} –∑–∞–ø–∏—Å–µ–π –∏–∑ {key}")
                                # –§–∏–ª—å—Ç—Ä—É–µ–º None –∑–Ω–∞—á–µ–Ω–∏—è
                                valid_items = [item for item in doc[key] if item is not None]
                                if len(valid_items) != len(doc[key]):
                                    self.stdout.write(f"   ‚ö†Ô∏è  –û—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–æ {len(doc[key]) - len(valid_items)} None –∑–Ω–∞—á–µ–Ω–∏–π –∏–∑ {key}")
                                merged_data[key].extend(valid_items)
                            elif key in doc:
                                self.stdout.write(f"   ‚ö†Ô∏è  –ö–ª—é—á {key} –µ—Å—Ç—å, –Ω–æ –∑–Ω–∞—á–µ–Ω–∏–µ: {type(doc[key])} = {doc[key]}")
                        except Exception as e:
                            self.stdout.write(f"   ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–ª—é—á–∞ {key}: {e}")
                            self.stdout.write(f"   üìä –ó–Ω–∞—á–µ–Ω–∏–µ –∫–ª—é—á–∞ {key}: {doc.get(key)}")
                            continue

            self.stdout.write(f"üìä –ò—Ç–æ–≥–æ–≤–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞:")
            self.stdout.write(f"   –ú–ù–ù: {len(merged_data['medications'])}")
            self.stdout.write(f"   –¢–æ—Ä–≥–æ–≤—ã–µ –Ω–∞–∑–≤–∞–Ω–∏—è: {len(merged_data['trade_names'])}")
            self.stdout.write(f"   –°—Ö–µ–º—ã: {len(merged_data['regimens'])}")
            
            return merged_data
            
        except Exception as e:
            self.stdout.write(f"   ‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–∞—Ä—Å–∏–Ω–≥–µ: {e}")
            import traceback
            self.stdout.write(f"   üìä Traceback: {traceback.format_exc()}")
            return merged_data

    @transaction.atomic
    def handle(self, *args, **options):
        yaml_file = options['yaml_file']
        force_mode = options.get('force', False)
        
        if not os.path.exists(yaml_file):
            raise CommandError(f'–§–∞–π–ª {yaml_file} –Ω–µ –Ω–∞–π–¥–µ–Ω!')

        self.stdout.write(f'üìÅ –ó–∞–≥—Ä—É–∂–∞—é –¥–∞–Ω–Ω—ã–µ –∏–∑ —Ñ–∞–π–ª–∞: {yaml_file}')
        
        if force_mode:
            self.stdout.write(self.style.WARNING("üîß –†–µ–∂–∏–º --force: –£–¥–∞–ª–µ–Ω–∏–µ –≤—Å–µ—Ö —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –¥–∞–Ω–Ω—ã—Ö..."))
            from pharmacy.models import (
                RegimenAdjustment, DosingInstruction, PopulationCriteria,
                Regimen, TradeName, Medication, MedicationGroup,
                ReleaseForm, AdministrationMethod
            )
            RegimenAdjustment.objects.all().delete()
            DosingInstruction.objects.all().delete()
            PopulationCriteria.objects.all().delete()
            Regimen.objects.all().delete()
            TradeName.objects.all().delete()
            Medication.objects.all().delete()
            MedicationGroup.objects.all().delete()
            ReleaseForm.objects.all().delete()
            AdministrationMethod.objects.all().delete()
            self.stdout.write("   ‚úÖ –í—Å–µ —Å–≤—è–∑–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –±—ã–ª–∏ —É–¥–∞–ª–µ–Ω—ã.")

        try:
            data = self._parse_multi_document_yaml(yaml_file)
            
            # === 1. –ó–ê–ì–†–£–ó–ö–ê –°–ü–†–ê–í–û–ß–ù–ò–ö–û–í ===
            self.stdout.write("üìã –ó–∞–≥—Ä—É–∂–∞—é —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫–∏...")
            for group_data in data.get('medication_groups', []):
                MedicationGroup.objects.update_or_create(name=group_data['name'], defaults=group_data)
            
            for form_data in data.get('release_forms', []):
                ReleaseForm.objects.update_or_create(name=form_data['name'], defaults=form_data)
            
            for method_data in data.get('administration_methods', []):
                AdministrationMethod.objects.update_or_create(name=method_data['name'], defaults=method_data)
            self.stdout.write("   ‚úÖ –°–ø—Ä–∞–≤–æ—á–Ω–∏–∫–∏ –∑–∞–≥—Ä—É–∂–µ–Ω—ã.")

                        # === 2. –ó–ê–ì–†–£–ó–ö–ê –ú–ù–ù (Medications) ===
            self.stdout.write("üìã –ó–∞–≥—Ä—É–∂–∞—é –ú–ù–ù...")
            for med_data in data.get('medications', []):
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ atc_code, –∏–Ω–∞—á–µ –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø—É—Å—Ç—É—é —Å—Ç—Ä–æ–∫—É
                atc_code = med_data.get('atc_code')
                if atc_code is None:
                    atc_code = ''
                
                med_defaults = {
                    'is_active': med_data.get('is_active', True),
                    'medication_form': med_data.get('medication_form'),
                    'external_info_url': med_data.get('external_info_url'),
                    'code': atc_code
                }
                Medication.objects.update_or_create(name=med_data['name'], defaults=med_defaults)
            self.stdout.write("   ‚úÖ –ú–ù–ù –∑–∞–≥—Ä—É–∂–µ–Ω—ã.")
            
            # === 3. –ó–ê–ì–†–£–ó–ö–ê –¢–û–†–ì–û–í–´–• –ù–ê–ó–í–ê–ù–ò–ô (TradeNames) ===
            self.stdout.write("üìã –ó–∞–≥—Ä—É–∂–∞—é —Ç–æ—Ä–≥–æ–≤—ã–µ –Ω–∞–∑–≤–∞–Ω–∏—è...")
            for tn_data in data.get('trade_names', []):
                try:
                    medication = Medication.objects.get(name=tn_data['medication_name'])
                    group = MedicationGroup.objects.get(name=tn_data['group_name'])
                    release_form = ReleaseForm.objects.get(name=tn_data['release_form_name'])
                    
                    tn_defaults = {
                        'medication_group': group,
                        'release_form': release_form,
                        'atc_code': tn_data.get('atc_code'),
                        'external_info_url': tn_data.get('external_info_url')
                    }
                    TradeName.objects.update_or_create(
                        name=tn_data['name'],
                        medication=medication,
                        defaults=tn_defaults
                    )
                except (Medication.DoesNotExist, MedicationGroup.DoesNotExist, ReleaseForm.DoesNotExist) as e:
                    self.stdout.write(self.style.ERROR(f"   ‚ùå –ü—Ä–æ–ø—É—Å–∫ '{tn_data['name']}': –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ —Å–≤—è–∑–∞–Ω–Ω–∞—è –∑–∞–ø–∏—Å—å. –û—à–∏–±–∫–∞: {e}"))
            self.stdout.write("   ‚úÖ –¢–æ—Ä–≥–æ–≤—ã–µ –Ω–∞–∑–≤–∞–Ω–∏—è –∑–∞–≥—Ä—É–∂–µ–Ω—ã.")
            
            # === 3.1. –ó–ê–ü–û–õ–ù–ï–ù–ò–ï –ü–û–õ–Ø trade_name –í –ú–ù–ù ===
            self.stdout.write("üìã –ó–∞–ø–æ–ª–Ω—è—é –ø–æ–ª–µ trade_name –≤ –ú–ù–ù...")
            for medication in Medication.objects.all():
                # –ü–æ–ª—É—á–∞–µ–º –ø–µ—Ä–≤–æ–µ —Ç–æ—Ä–≥–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–ª—è —ç—Ç–æ–≥–æ –ú–ù–ù
                first_trade_name = TradeName.objects.filter(medication=medication).first()
                if first_trade_name:
                    medication.trade_name = first_trade_name.name
                    medication.save()
                    self.stdout.write(f"   ‚úÖ {medication.name}: trade_name = {first_trade_name.name}")
                else:
                    self.stdout.write(f"   ‚ö†Ô∏è  {medication.name}: –Ω–µ—Ç —Ç–æ—Ä–≥–æ–≤—ã—Ö –Ω–∞–∑–≤–∞–Ω–∏–π")
            self.stdout.write("   ‚úÖ –ü–æ–ª–µ trade_name –∑–∞–ø–æ–ª–Ω–µ–Ω–æ.")
            
            # === 3.2. –û–ë–ù–û–í–õ–ï–ù–ò–ï –ú–ù–ù –î–ê–ù–ù–´–ú–ò –ò–ó –¢–û–†–ì–û–í–´–• –ù–ê–ó–í–ê–ù–ò–ô ===
            self.stdout.write("üìã –û–±–Ω–æ–≤–ª—è—é –ú–ù–ù –¥–∞–Ω–Ω—ã–º–∏ –∏–∑ —Ç–æ—Ä–≥–æ–≤—ã—Ö –Ω–∞–∑–≤–∞–Ω–∏–π...")
            for medication in Medication.objects.all():
                # –ü–æ–ª—É—á–∞–µ–º –ø–µ—Ä–≤–æ–µ —Ç–æ—Ä–≥–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–ª—è —ç—Ç–æ–≥–æ –ú–ù–ù
                first_trade_name = TradeName.objects.filter(medication=medication).first()
                if first_trade_name:
                    update_needed = False
                    
                    # –û–±–Ω–æ–≤–ª—è–µ–º ATC –∫–æ–¥, –µ—Å–ª–∏ –æ–Ω –ø—É—Å—Ç–æ–π –≤ –ú–ù–ù
                    if not medication.code and first_trade_name.atc_code:
                        medication.code = first_trade_name.atc_code
                        update_needed = True
                        self.stdout.write(f"   ‚úÖ {medication.name}: –¥–æ–±–∞–≤–ª–µ–Ω ATC –∫–æ–¥ {first_trade_name.atc_code}")
                    
                    # –û–±–Ω–æ–≤–ª—è–µ–º –≤–Ω–µ—à–Ω—é—é —Å—Å—ã–ª–∫—É, –µ—Å–ª–∏ –æ–Ω–∞ –ø—É—Å—Ç–∞—è –≤ –ú–ù–ù
                    if not medication.external_info_url and first_trade_name.external_info_url:
                        medication.external_info_url = first_trade_name.external_info_url
                        update_needed = True
                        self.stdout.write(f"   ‚úÖ {medication.name}: –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤–Ω–µ—à–Ω—è—è —Å—Å—ã–ª–∫–∞")
                    
                    if update_needed:
                        medication.save()
                else:
                    self.stdout.write(f"   ‚ö†Ô∏è  {medication.name}: –Ω–µ—Ç —Ç–æ—Ä–≥–æ–≤—ã—Ö –Ω–∞–∑–≤–∞–Ω–∏–π")
            self.stdout.write("   ‚úÖ –ú–ù–ù –æ–±–Ω–æ–≤–ª–µ–Ω—ã –¥–∞–Ω–Ω—ã–º–∏ –∏–∑ —Ç–æ—Ä–≥–æ–≤—ã—Ö –Ω–∞–∑–≤–∞–Ω–∏–π.")

            # === 4. –ó–ê–ì–†–£–ó–ö–ê –°–•–ï–ú –õ–ï–ß–ï–ù–ò–Ø (Regimens) ===
            self.stdout.write("üìã –ó–∞–≥—Ä—É–∂–∞—é —Å—Ö–µ–º—ã –ª–µ—á–µ–Ω–∏—è...")
            for regimen_data in data.get('regimens', []):
                try:
                    medication = Medication.objects.get(name=regimen_data['medication_name'])
                    
                    # –°–æ–∑–¥–∞–µ–º –∏–ª–∏ –æ–±–Ω–æ–≤–ª—è–µ–º –æ—Å–Ω–æ–≤–Ω—É—é —Å—Ö–µ–º—É
                    regimen, created = Regimen.objects.update_or_create(
                        medication=medication,
                        name=regimen_data['name'],
                        defaults={'notes': regimen_data.get('notes')}
                    )
                    
                    # –û—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–µ —Å–≤—è–∑–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è —ç—Ç–æ–≥–æ regimen, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –¥—É–±–ª–µ–π
                    regimen.population_criteria.all().delete()
                    regimen.dosing_instructions.all().delete()
                    regimen.adjustments.all().delete()

                    # –°–≤—è–∑—ã–≤–∞–µ–º —Å –¥–∏–∞–≥–Ω–æ–∑–∞–º–∏ (Many-to-Many)
                    indication_codes = regimen_data.get('indications', [])
                    if indication_codes:
                        diagnoses = Diagnosis.objects.filter(code__in=indication_codes)
                        regimen.indications.set(diagnoses)
                    
                    # –°–æ–∑–¥–∞–µ–º –≤–ª–æ–∂–µ–Ω–Ω—ã–µ PopulationCriteria
                    for pc_data in regimen_data.get('population_criteria', []):
                        # –§–∏–ª—å—Ç—Ä—É–µ–º —Ç–æ–ª—å–∫–æ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –ø–æ–ª—è –º–æ–¥–µ–ª–∏
                        from pharmacy.models import PopulationCriteria
                        valid_pc_fields = {k: v for k, v in pc_data.items() 
                                         if hasattr(PopulationCriteria, k)}
                        PopulationCriteria.objects.create(regimen=regimen, **valid_pc_fields)
                        
                    # –°–æ–∑–¥–∞–µ–º –≤–ª–æ–∂–µ–Ω–Ω—ã–µ DosingInstruction
                    for di_data in regimen_data.get('dosing_instructions', []):
                        # –°–≤—è–∑—ã–≤–∞–µ–º —Å –º–µ—Ç–æ–¥–æ–º –ø–æ –∏–º–µ–Ω–∏
                        if di_data.get('route'):
                            route_obj, _ = AdministrationMethod.objects.get_or_create(name=di_data['route'])
                            di_data['route'] = route_obj
                        # –§–∏–ª—å—Ç—Ä—É–µ–º —Ç–æ–ª—å–∫–æ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –ø–æ–ª—è –º–æ–¥–µ–ª–∏
                        from pharmacy.models import DosingInstruction
                        valid_di_fields = {k: v for k, v in di_data.items() 
                                         if hasattr(DosingInstruction, k)}
                        DosingInstruction.objects.create(regimen=regimen, **valid_di_fields)
                    
                    # –°–æ–∑–¥–∞–µ–º –≤–ª–æ–∂–µ–Ω–Ω—ã–µ RegimenAdjustment
                    for ra_data in regimen_data.get('adjustments', []):
                        # –§–∏–ª—å—Ç—Ä—É–µ–º —Ç–æ–ª—å–∫–æ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –ø–æ–ª—è –º–æ–¥–µ–ª–∏
                        from pharmacy.models import RegimenAdjustment
                        valid_ra_fields = {k: v for k, v in ra_data.items() 
                                         if hasattr(RegimenAdjustment, k)}
                        RegimenAdjustment.objects.create(regimen=regimen, **valid_ra_fields)

                except Medication.DoesNotExist as e:
                    self.stdout.write(self.style.ERROR(f"   ‚ùå –ü—Ä–æ–ø—É—Å–∫ —Å—Ö–µ–º—ã '{regimen_data['name']}': –Ω–µ –Ω–∞–π–¥–µ–Ω –ú–ù–ù. –û—à–∏–±–∫–∞: {e}"))
            self.stdout.write("   ‚úÖ –°—Ö–µ–º—ã –ª–µ—á–µ–Ω–∏—è –∑–∞–≥—Ä—É–∂–µ–Ω—ã.")

            self.stdout.write(self.style.SUCCESS('‚úÖ‚úÖ‚úÖ –í—Å–µ –¥–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω—ã!'))

        except yaml.YAMLError as e:
            raise CommandError(f'‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ YAML: {e}')
        except Exception as e:
            # –û–±–æ—Ä–∞—á–∏–≤–∞–µ–º –≤ CommandError, —á—Ç–æ–±—ã Django –∫—Ä–∞—Å–∏–≤–æ –ø–æ–∫–∞–∑–∞–ª –æ—à–∏–±–∫—É
            raise CommandError(f'‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –¥–∞–Ω–Ω—ã—Ö: {e}')